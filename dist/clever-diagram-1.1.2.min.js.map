{"version":3,"file":"clever-diagram-1.1.2.min.js","sources":["../src/utils/Observable.js","../src/Component.js","../src/DiagramDefaults.js","../src/DiagramEdges.js","../src/DiagramNode.js","../src/DiagramNodes.js","../src/Diagram.js"],"sourcesContent":["/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Bind event\r\n     * @param {String} event event name\r\n     * @param {Function} handler event handler\r\n     */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        this._handlers[event].push(handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Unbind event\r\n     * @param {String} event event name\r\n     * @param {Function} [handler] event handler, optional\r\n     */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        if (!handler) {\r\n            this._handlers[event] = [];\r\n        } else {\r\n            var handlers = this._handlers[event];\r\n            var index = handlers.indexOf(handler);\r\n            if (index != -1){\r\n                handlers.splice(index, 1);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Add new event to be handled\r\n     * @param {String} event\r\n     */\r\n    add(event) {\r\n        if (!(event in this._handlers)) {\r\n            this._handlers[event] = [];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Fire widget event\r\n     * @param {String} event event name\r\n     * @param {*} ...args event arguments\r\n     */\r\n    fire(event, ...args) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        var handlers = this._handlers[event];\r\n        for (var i = 0; i < handlers.length; i++) {\r\n            handlers[i].apply(this, args);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Destroys this observable, removes events and so on\r\n     */\r\n    destroy() {\r\n        this._handlers = null;\r\n        return this;\r\n    }\r\n\r\n}","import Observable from \"./utils/Observable\";\r\nimport style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nclass Component {\r\n\r\n    constructor(\r\n        className = \"component\"\r\n    ) {\r\n        this._container = null;\r\n        this._className = className;\r\n\r\n        this._observable = new Observable([\r\n            \"enter\",\r\n            \"leave\",\r\n            \"click\"\r\n        ]);\r\n\r\n        this._svg = null;\r\n    }\r\n\r\n    on(eventName, handler) {\r\n        this._observable.on(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    off(eventName, handler) {\r\n        this._observable.off(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    get className() {\r\n        return this._className;\r\n    }\r\n\r\n    get container() {\r\n        return this._container;\r\n    }\r\n\r\n    get observable() {\r\n        return this._observable;\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0){\r\n\r\n        return d3.select(selector).append(\"g\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n\r\n    }\r\n\r\n    render(selector, x = 0, y = 0, index = 0){\r\n        this.destroy();\r\n\r\n        this._container = this._renderContainer(selector, x, y);\r\n\r\n        if (!this._container) {\r\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\r\n        }\r\n\r\n        this._container.datum(index);\r\n\r\n        this._container\r\n            .on(\"click\", (index) => {\r\n                this._observable.fire(\"click\", index);\r\n            })\r\n            .on(\"mouseenter\", (index) => {\r\n                this._observable.fire(\"enter\", index);\r\n            })\r\n            .on(\"mouseleave\", (index) => {\r\n                this._observable.fire(\"leave\", index);\r\n            });\r\n\r\n        return this;\r\n    }\r\n\r\n    destroy(){\r\n        if (this.isRendered()) {\r\n            this.clearData();\r\n            this._container.datum(null);\r\n            this._container.remove();\r\n            this._container = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearData() {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call clearData() when widget is not rendered, please call .render() first.\";\r\n        }\r\n        this._clearData();\r\n        this._data = null;\r\n        return this;\r\n    }\r\n\r\n    isRendered(){\r\n        return this._container !== null;\r\n    }\r\n\r\n    setData(data) {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call setData() when component is not rendered, please call .render() first.\";\r\n        }\r\n\r\n        return this._setData(this._container, data);\r\n    }\r\n}\r\n\r\nexport default Component;\r\n","\r\nexport const DIAGRAM_MARGIN = 50;\r\nexport const NODE_WIDTH = 190;\r\nexport const NODE_HEIGHT = 40;\r\nexport const NODE_GROUP_WIDTH = 40;\r\n\r\nexport const MOUSE_CONTROL = false;\r\n\r\nexport const ICON_FONT_SIZE = 18;\r\nexport const NODE_NAME_FONT_SIZE = 13;\r\n\r\nexport const NODE_ICON_COLOR = '#4a4a4a';\r\nexport const NODE_NAME_COLOR = '#4a4a4a';\r\nexport const NODE_DEFAULT_BG = 'rgba(255,255,255,1)';\r\nexport const NODE_SELECTED_BG = '#f8e71c';\r\nexport const NODE_MUTED_BG = '#f0f0f0';\r\nexport const NODE_GROUP_COLOR_DEFAULT = '#2196F3';\r\nexport const NODE_GROUP_COLOR_MUTED = '#d5d5d5';\r\nexport const NODE_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR = '#4a4a4a';\r\n","import Component from './Component';\r\nimport {\r\n    EDGES_STROKE_COLOR\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdges extends Component {\r\n    constructor() {\r\n        super('diagram-edges');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._renderDefs();\r\n\r\n        this._renderEdges(data);\r\n    }\r\n\r\n    _renderDefs() {\r\n        this.container.append(\"svg:defs\")\r\n            .append(\"svg:marker\")\r\n            .attr(\"id\", \"end\")\r\n            .attr(\"viewBox\", \"0 -5 10 10\")\r\n            .attr(\"refX\", 10)\r\n            .attr(\"refY\", 0)\r\n            .attr(\"markerWidth\", 5)\r\n            .attr(\"markerHeight\", 5)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"fill\", EDGES_STROKE_COLOR)\r\n            .style(\"stroke-opacity\", 0.6)\r\n            .append(\"svg:path\")\r\n            .attr(\"d\", \"M0,-5L10,0L0,5\");\r\n    }\r\n\r\n    _renderEdges(data) {\r\n        const layout = data.layout;\r\n        data.edges.forEach((edge, index) => {\r\n            const link = this.container.append(\"path\")\r\n                .attr(\"class\", \"link\")\r\n                .attr(\"stroke\", EDGES_STROKE_COLOR)\r\n                .attr(\"stroke-width\", 1)\r\n                .attr(\"stroke-linejoin\", \"bevel\")\r\n                .attr(\"fill\", \"transparent\")\r\n                .attr(\"d\", () => {\r\n                    const d = layout.edges[index].sections[0];\r\n                    let path = \"\";\r\n                    if (d.startPoint && d.endPoint) {\r\n                        path += `M${d.startPoint.x} ${d.startPoint.y} `;\r\n\r\n                        const defaultRadius = 6;\r\n                        let lastPoint = {\r\n                            x: d.startPoint.x,\r\n                            y: d.startPoint.y\r\n                        };\r\n\r\n                        (d.bendPoints || []).forEach((bendPoint, index) => {\r\n\r\n                            const nextPoint = d.bendPoints[index + 1] || d.endPoint;\r\n\r\n                            const params = this._getSectionParams(\r\n                                bendPoint,\r\n                                lastPoint,\r\n                                nextPoint,\r\n                                defaultRadius\r\n                            );\r\n\r\n                            const section = this._getSection(params);\r\n\r\n                            path += section;\r\n\r\n                            lastPoint.x = bendPoint.x;\r\n                            lastPoint.y = bendPoint.y;\r\n\r\n                        }, this);\r\n\r\n                        const isEnd = true;\r\n                        const nextPoint = {};\r\n                        const params = this._getSectionParams(\r\n                            d.endPoint,\r\n                            lastPoint,\r\n                            nextPoint,\r\n                            defaultRadius,\r\n                            isEnd\r\n                        );\r\n\r\n                        const endSection = this._getSection(params);\r\n\r\n                        path += endSection;\r\n                    }\r\n\r\n                    return path;\r\n                });\r\n\r\n            if (edge.type == \"arrow\") {\r\n                link.attr(\"marker-end\", \"url(#end)\");\r\n            }\r\n        });\r\n    }\r\n\r\n    _getSection(params) {\r\n        const {x, y, defaultRadius, isEnd} = params;\r\n\r\n        let curve = '';\r\n        let line = '';\r\n        let radius = defaultRadius;\r\n\r\n        const diff = {\r\n            lastX: x.rounded - x.lastRounded,\r\n            lastY: y.rounded - y.lastRounded,\r\n            nextX: x.nextRounded - x.rounded,\r\n            nextY: y.nextRounded - y.rounded\r\n        };\r\n\r\n        Object.keys(diff).forEach(key => {\r\n            const abs = Math.abs(diff[key]);\r\n            if (abs && abs < radius) {\r\n                radius = abs / 2;\r\n            }\r\n        });\r\n\r\n        const lineEndCorrection = isEnd ? 0 : radius;\r\n\r\n        // DRAW LINE\r\n        if (diff.lastX > 0) {\r\n            // to right\r\n            line = `L ${x.current - lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastX < 0) {\r\n            // to left\r\n            line = `L ${x.current + lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastY > 0) {\r\n            // to bottom\r\n            line = `L ${x.current} ${y.current - lineEndCorrection} `;\r\n        } else if (diff.lastY < 0) {\r\n            // to top\r\n            line = `L ${x.current} ${y.current + lineEndCorrection} `;\r\n        }\r\n\r\n        // DRAW CURVE\r\n        if (!isEnd) {\r\n            if (diff.nextY > 0) {\r\n                // to bottom\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current + radius} `;\r\n            } else if (diff.nextY < 0) {\r\n                // to top\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current - radius} `;\r\n            } else if (diff.nextX < 0) {\r\n                // to left\r\n                curve = `Q ${x.current} ${y.current} ${x.current - radius} ${y.current} `;\r\n            } else if (diff.nextX > 0) {\r\n                // to right\r\n                curve = `Q ${x.current} ${y.current} ${x.current + radius} ${y.current} `;\r\n            }\r\n        }\r\n\r\n        return line.concat(curve);\r\n    }\r\n\r\n    _getSectionParams(\r\n        point,\r\n        lastPoint,\r\n        nextPoint,\r\n        defaultRadius,\r\n        isEnd = false\r\n    ) {\r\n        return {\r\n            x: {\r\n                current: point.x,\r\n                last: lastPoint.x,\r\n                next: nextPoint.x,\r\n                rounded: Math.round(point.x),\r\n                lastRounded: Math.round(lastPoint.x),\r\n                nextRounded: Math.round(nextPoint.x)\r\n            },\r\n            y: {\r\n                current: point.y,\r\n                last: lastPoint.y,\r\n                next: nextPoint.y,\r\n                rounded: Math.round(point.y),\r\n                lastRounded: Math.round(lastPoint.y),\r\n                nextRounded: Math.round(nextPoint.y)\r\n            },\r\n            defaultRadius,\r\n            isEnd\r\n        };\r\n    }\r\n}\r\n\r\nexport default DiagramEdges;\r\n","import style from \"./CleverDiagram.css\";\r\nimport Component from './Component';\r\nimport {\r\n    NODE_HEIGHT,\r\n    ICON_FONT_SIZE,\r\n    NODE_SELECTED_BG,\r\n    NODE_DEFAULT_BG,\r\n    NODE_MUTED_BG,\r\n    NODE_GROUP_COLOR_MUTED,\r\n    NODE_GROUP_WIDTH,\r\n    NODE_STROKE_COLOR,\r\n    NODE_NAME_FONT_SIZE,\r\n    NODE_ICON_COLOR,\r\n    NODE_NAME_COLOR\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramNode extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily\r\n        }\r\n    ) {\r\n        super('diagram-node');\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._observable\r\n            .add(\"enterNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._node = data.node;\r\n        this._selected = data.selected;\r\n        this._selectedMuted = data.selectedMuted;\r\n        this._selectedSubsequent = data.selectedSubsequent;\r\n        this._styles = data.styles;\r\n        this._groupColor = data.groupColor;\r\n\r\n        this._renderAll();\r\n    }\r\n\r\n    _renderAll() {\r\n        this._renderGradients();\r\n        this._renderNodeBaseLayer();\r\n        this._renderNodeSkeleton();\r\n\r\n        if (this._node.icon) {\r\n            this._renderIcon();\r\n        }\r\n\r\n        this._renderLine();\r\n        this._setNodeStyle();\r\n        this._rendertNodeName();\r\n    }\r\n\r\n    _renderGradients() {\r\n        this._gradientEdge = NODE_GROUP_WIDTH/this._nodeWidth;\r\n\r\n        this._defs = this.container.append(\"svg:defs\");\r\n\r\n        this._renderDefaultGradient();\r\n        this._renderMutedGradient();\r\n    }\r\n\r\n    _renderDefaultGradient() {\r\n        const colorDefaultBg = NODE_DEFAULT_BG;\r\n\r\n        this._defaultGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", `node-background-default-${this._node.name}`);\r\n\r\n        this._defaultGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge, color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge + 0.001, color: colorDefaultBg, opacity: '1'},\r\n                { offset: \"1\", color: colorDefaultBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderMutedGradient() {\r\n        const colorMutedBg = NODE_MUTED_BG;\r\n        const colorGroupMuted= NODE_GROUP_COLOR_MUTED;\r\n\r\n        this._mutedGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", \"node-background-muted\");\r\n\r\n        this._mutedGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge, color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge + 0.001, color: colorMutedBg, opacity: '1'},\r\n                { offset: \"1\", color: colorMutedBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderNodeBaseLayer() {\r\n        this._nodeBaseLayer = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"rx\", 5);\r\n    }\r\n\r\n    _renderNodeSkeleton() {\r\n        this._nodeSkeleton = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"rx\", 5)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"class\", style['node-skeleton'])\r\n            .attr(\"id\", this._node.name);\r\n    }\r\n\r\n    _renderIcon() {\r\n        this._icon = this.container.append(\"text\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH/2)\r\n            .attr(\"y\", (this._styles.height/2 + ICON_FONT_SIZE/2) - 1)\r\n            .attr(\"class\", style['node-icon'])\r\n            .attr(\"font-family\", this._iconFontFamily)\r\n            .attr(\"font-size\", ICON_FONT_SIZE)\r\n            .attr(\"fill\", NODE_ICON_COLOR)\r\n            .text(this._node.icon);\r\n    }\r\n\r\n    _renderLine() {\r\n        this._line = this.container\r\n            .append(\"line\")\r\n            .attr(\"x1\", NODE_GROUP_WIDTH)\r\n            .attr(\"y1\", 0)\r\n            .attr(\"x2\", NODE_GROUP_WIDTH)\r\n            .attr(\"y2\", NODE_GROUP_WIDTH)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"opacity\", 0);\r\n    }\r\n\r\n    _setNodeStyle() {\r\n        if (this._selected) {\r\n            this._setSpecialStyle(NODE_SELECTED_BG, 1);\r\n        } else if (this._highlighted) {\r\n            this._setSpecialStyle(this._groupColor, 0.4);\r\n        } else if (!this._highlightedSubsequent && (this._selectedMuted || this._highlightedMuted)) {\r\n            this._setMutedStyle();\r\n        } else {\r\n            this._setOriginalStyle();\r\n        }\r\n    }\r\n\r\n    _rendertNodeName() {\r\n        this._clipPath = this._defs\r\n            .append(\"clipPath\")\r\n            .attr(\"id\", \"node-name-mask\");\r\n\r\n        this._nodeNameMask = this._clipPath\r\n            .append(\"rect\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._nodeWidth - NODE_GROUP_WIDTH - 25)\r\n            .attr(\"height\", this._styles.height);\r\n\r\n        this._nodeName = this.container\r\n            .append(\"g\")\r\n            .attr(\"clip-path\", \"url(#node-name-mask)\")\r\n            .append(\"text\")\r\n            .text(this._node.name)\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", (NODE_HEIGHT/2 + NODE_NAME_FONT_SIZE/2) - 2)\r\n            .attr(\"font-size\", NODE_NAME_FONT_SIZE)\r\n            .attr(\"fill\", NODE_NAME_COLOR)\r\n            .attr(\"class\", style[\"node-name\"]);\r\n    }\r\n\r\n    setStyle() {\r\n        this._setNodeStyle();\r\n    }\r\n\r\n    isSelected() {\r\n        return this._selected;\r\n    }\r\n\r\n    isSelectedSubsequent() {\r\n        return this._selectedSubsequent;\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setSelectedSubsequent(value) {\r\n        this._selectedSubsequent = value;\r\n    }\r\n\r\n    setHighlighted(value) {\r\n        this._highlighted = value;\r\n    }\r\n\r\n    setHighlightedSubsequent(value) {\r\n        this._highlightedSubsequent = value;\r\n    }\r\n\r\n    setSelectedMuted(value) {\r\n        this._selectedMuted = value;\r\n    }\r\n\r\n    setHighlightedMuted(value) {\r\n        this._highlightedMuted = value;\r\n    }\r\n\r\n    _setSpecialStyle(color, opacity) {\r\n        this._nodeSkeleton.attr(\"fill\", color);\r\n        this._nodeSkeleton.attr(\"fill-opacity\", opacity);\r\n        this._line.attr(\"opacity\", \"1\");\r\n    }\r\n\r\n    _setMutedStyle() {\r\n        this._nodeSkeleton.attr(\"fill\", \"url(#node-background-muted\");\r\n        this._nodeSkeleton.attr(\"fill-opacity\", \"1\");\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n\r\n    _setOriginalStyle() {\r\n        this._nodeSkeleton.attr(\"fill\", `url(#node-background-default-${this._node.name})`);\r\n        this._nodeSkeleton.attr(\"fill-opacity\", \"1\");\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n}\r\n\r\nexport default DiagramNode;\r\n","import Component from './Component';\r\nimport DiagramNode from './DiagramNode';\r\nimport {NODE_GROUP_COLOR_DEFAULT} from './DiagramDefaults';\r\n\r\nclass DiagramNodes extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            mouseControl,\r\n            iconFontFamily\r\n        }\r\n    ) {\r\n        super('diagram-nodes');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._mouseControl = mouseControl;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataNodes = data.nodes;\r\n        this._dataEdges = data.edges;\r\n        this._layout = data.layout;\r\n        this._groupColors = data.groupColors;\r\n        this._selected = data.selected;\r\n\r\n        this._subsequentNodes = this._getSubsequentNodes(data);\r\n\r\n        this._createNodes(data);\r\n        this._renderNodes();\r\n\r\n        data.nodes.forEach((node, index) => this._setNodeData(node, index));\r\n\r\n        if (this._mouseControl) {\r\n            this._doSelecting();\r\n            this._doHighlighting();\r\n        }\r\n    }\r\n\r\n    _getSubsequentNodes(data) {\r\n        return data.nodes.reduce((obj, item) => {\r\n            const edges = this._findEdgesRecursive(data.edges, [item.name]);\r\n            obj[item.name] = edges.map(edge => edge.end);\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n    _findEdgesRecursive(edges, names, alreadySearched=[]) {\r\n        let results = names.reduce((acc, cur) => {\r\n            if (alreadySearched.indexOf(cur) >= 0) {\r\n                return acc;\r\n            }\r\n\r\n            const filteredEdges = edges.filter(edge => edge.start === cur);\r\n\r\n            return acc.concat(filteredEdges);\r\n        }, []);\r\n\r\n        const namesToFind = results.map(result => result.end);\r\n        alreadySearched = alreadySearched.concat(names);\r\n\r\n        if (namesToFind.length) {\r\n            return results.concat(this._findEdgesRecursive(this._dataEdges, namesToFind, alreadySearched));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    _createNodes(data) {\r\n        this._nodes = data.nodes.map(() => {\r\n            return new DiagramNode({\r\n                nodeWidth: this._nodeWidth,\r\n                iconFontFamily: this._iconFontFamily\r\n            });\r\n        });\r\n    }\r\n\r\n    _renderNodes() {\r\n        this._nodes.forEach((node, index) => {\r\n            const name = this._dataNodes[index].name;\r\n            const styles = this._getStyles(this._layout.children[index]);\r\n            node.render(this.container.node(), styles.x, styles.y, index)\r\n                .on(\"click\", (index) => {\r\n                    if (this._nodes[index].isSelected()) {\r\n                        this._observable.fire(\"deselectNode\", name);\r\n                    } else {\r\n                        this._observable.fire(\"selectNode\", name);\r\n                    }\r\n                })\r\n                .on(\"enter\", () => {\r\n                    this._enterTimeout = setTimeout(() => {\r\n                        this._observable.fire(\"highlightNode\", name);\r\n                    }, 150);\r\n                })\r\n                .on(\"leave\", () => {\r\n                    clearTimeout(this._enterTimeout);\r\n                    this._observable.fire(\"unhighlightNode\");\r\n                });\r\n        });\r\n    }\r\n\r\n    selectNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const selected = name === node.name;\r\n            const muted = !(selected || isSubsequentNode);\r\n\r\n            diagramNode.setSelected(selected);\r\n            diagramNode.setSelectedSubsequent(isSubsequentNode);\r\n            diagramNode.setSelectedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectNode(name, highlightDeselected=false) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n\r\n            diagramNode.setSelected(false);\r\n            diagramNode.setSelectedMuted(false);\r\n\r\n            if (highlightDeselected) {\r\n                const highlighted = name === node.name;\r\n                const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n                const muted = !(highlighted || isSubsequentNode);\r\n\r\n                diagramNode.setHighlighted(highlighted);\r\n                diagramNode.setHighlightedSubsequent(isSubsequentNode);\r\n                diagramNode.setHighlightedMuted(muted);\r\n            }\r\n            diagramNode.setStyle();\r\n        });\r\n\r\n    }\r\n\r\n    highlightNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const highlighted = name === node.name;\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const muted = !(highlighted || isSubsequentNode);\r\n\r\n            diagramNode.setHighlighted(highlighted);\r\n            diagramNode.setHighlightedSubsequent(isSubsequentNode);\r\n            diagramNode.setHighlightedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightNode() {\r\n        this._nodes.forEach((diagramNode) => {\r\n            diagramNode.setHighlighted(false);\r\n            diagramNode.setHighlightedSubsequent(false);\r\n            diagramNode.setHighlightedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    _setNodeData(node, index) {\r\n        const styles = this._getStyles(this._layout.children[index]);\r\n        const groupColor = this._groupColors[node.group] || NODE_GROUP_COLOR_DEFAULT;\r\n        const selected = this._selected === node.name;\r\n        let selectedMuted, selectedSubsequent = false;\r\n\r\n        if (this._selected) {\r\n            const subsequentNodes = this._subsequentNodes[this._selected];\r\n            const isSubsequentNode = subsequentNodes && subsequentNodes.indexOf(node.name) >= 0;\r\n            selectedMuted = !isSubsequentNode;\r\n            selectedSubsequent = isSubsequentNode;\r\n        }\r\n\r\n        this._nodes[index].setData({\r\n            node,\r\n            selected,\r\n            selectedSubsequent,\r\n            selectedMuted,\r\n            styles,\r\n            groupColor\r\n        });\r\n    }\r\n\r\n    _doSelecting() {\r\n        this.on(\"selectNode\", (name) => {\r\n            this.selectNode(name);\r\n        });\r\n\r\n        this.on(\"deselectNode\", (name) => {\r\n            this.deselectNode(name, true);\r\n        });\r\n    }\r\n\r\n    _doHighlighting() {\r\n        this.on(\"highlightNode\", (name) => {\r\n            this.highlightNode(name);\r\n        });\r\n\r\n        this.on(\"unhighlightNode\", () => {\r\n            this.unhighlightNode();\r\n        });\r\n    }\r\n\r\n    _getStyles(layout) {\r\n        return {\r\n            y: layout.y,\r\n            x: layout.x,\r\n            width: layout.width,\r\n            height: layout.height\r\n        };\r\n    }\r\n}\r\n\r\nexport default DiagramNodes;\r\n","import style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\nimport * as ELK from \"ELK\";\r\nimport Component from './Component';\r\nimport DiagramEdges from './DiagramEdges';\r\nimport DiagramNodes from './DiagramNodes';\r\nimport {\r\n    NODE_WIDTH,\r\n    NODE_HEIGHT,\r\n    MOUSE_CONTROL\r\n} from './DiagramDefaults';\r\n\r\n/**\r\n * @class\r\n * Main Diagram class\r\n * @param {Object} options\r\n */\r\nclass Diagram extends Component {\r\n    constructor({\r\n        nodeWidth = NODE_WIDTH,\r\n        nodeHeight = NODE_HEIGHT,\r\n        groupColors = {},\r\n        elkWorkerUrl,\r\n        mouseControl = MOUSE_CONTROL,\r\n        iconFontFamily,\r\n        zoomable = true\r\n    }) {\r\n        super('diagram');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._nodeHeight = nodeHeight;\r\n        this._groupColors = groupColors;\r\n        this._elkWorkerUrl = elkWorkerUrl;\r\n        this._mouseControl = mouseControl;\r\n        this._iconFontFamily = iconFontFamily;\r\n        this._zoomable = zoomable;\r\n\r\n        this._hasRenderedNodes = false;\r\n        this._currentScale = 1;\r\n        this._transitionDuration = 200;\r\n\r\n        this._elk = new ELK({\r\n            workerUrl: this._elkWorkerUrl\r\n        });\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\")\r\n            .add(\"zoom\");\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0) {\r\n        this._wrapper = d3.select(selector);\r\n        this._svgContainer = d3.select(selector).append(\"svg\");\r\n\r\n        return this._svgContainer.append(\"g\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataEdges = data.edges || [];\r\n        this._dataNodes = data.nodes || [];\r\n        this._data = data;\r\n\r\n        return this._renderElk();\r\n    }\r\n\r\n    _renderElk() {\r\n        const graph = this._getElkGraph();\r\n\r\n        return this._elk.layout(graph).then(layout => {\r\n            this._renderEdges(layout);\r\n            this._renderNodes(layout);\r\n            this._graphSize = this._getGraphSize(layout.children, layout.edges);\r\n\r\n            if (!this._zoomable) {\r\n                this._setGraphSize(this._graphSize);\r\n            } else {\r\n                this._doZoom(this._graphSize);\r\n                this._centerGraph();\r\n            }\r\n\r\n            this._hasRenderedNodes = true;\r\n        });\r\n    }\r\n\r\n    _getElkGraph() {\r\n        return {\r\n            \"id\": \"root\",\r\n            properties: this._getRootProperties(),\r\n            \"children\": this._dataNodes.map(node => {\r\n                return {\r\n                    id: node.name,\r\n                    width: this._nodeWidth,\r\n                    height: this._nodeHeight\r\n                };\r\n            }),\r\n            \"edges\": this._dataEdges.map((edge, index) => {\r\n                return {\r\n                    id: \"edge_\" + index,\r\n                    sources: [edge.start],\r\n                    targets: [edge.end]\r\n                };\r\n            })\r\n        };\r\n    }\r\n\r\n    _getRootProperties(){\r\n        return {\r\n            'algorithm': 'layered',\r\n            'direction':'RIGHT'\r\n        };\r\n    }\r\n\r\n    _getGraphSize(nodes, edges) {\r\n        const edgesWithBendPoints = edges.flatMap(edge => edge.sections.filter(section => section.bendPoints));\r\n        const bendPointsYs = edgesWithBendPoints.flatMap(edge => edge.bendPoints.flatMap(bendPoint => bendPoint.y));\r\n        const maxEdgesY = Math.max.apply(Math, bendPointsYs);\r\n        const maxNodesY = Math.max.apply(Math, nodes.map(node => node.y + node.height));\r\n\r\n        const height = Math.max(maxEdgesY, maxNodesY) + 10;\r\n        const width = Math.max.apply(Math, nodes.map(node => node.x + node.width)) + 10;\r\n\r\n        return {width, height};\r\n    }\r\n\r\n    _setGraphSize({width, height}) {\r\n        this._svgContainer.style(\"width\", `${width}px`);\r\n        this._svgContainer.style(\"height\", `${height}px`);\r\n    }\r\n\r\n    _centerGraph() {\r\n        this._zoom.translateTo(this._svgContainer, 0, 0);\r\n    }\r\n\r\n    _doZoom(graphSize) {\r\n        const svgSize = this._svgContainer.node().getBoundingClientRect();\r\n\r\n        this._svgContainer.classed(style.zoomable, true);\r\n\r\n        this._zoomOutScaleWidth = this._getZoomOutScale(graphSize.width, svgSize.width);\r\n        this._zoomOutScaleHeight = this._getZoomOutScale(graphSize.height, svgSize.height);\r\n\r\n        this._zoomOutScale = Math.min(this._zoomOutScaleWidth, this._zoomOutScaleHeight);\r\n\r\n        const translateExtent = [\r\n            [0, 0],\r\n            [graphSize.width, graphSize.height]\r\n        ];\r\n\r\n        this._zoom = d3.zoom()\r\n            .extent([[0, 0], [svgSize.width, svgSize.height]])\r\n            .scaleExtent([this._zoomOutScale, 1])\r\n            .translateExtent(translateExtent);\r\n\r\n        this._zoom.on(\"zoom\", this._zoomHandler.bind(this));\r\n\r\n        this._wrapper.call(this._zoom);\r\n    }\r\n\r\n    _getZoomOutScale(size, max) {\r\n        if (size > max) {\r\n            return max / size;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    _zoomHandler() {\r\n        this._observable.fire(\"zoom\", d3.event.transform.k);\r\n        this._currentScale = d3.event.transform.k;\r\n        this._container.attr(\"transform\", d3.event.transform);\r\n    }\r\n\r\n    _renderEdges(layout) {\r\n        const data = {\r\n            layout,\r\n            edges: this._dataEdges\r\n        };\r\n        this._edges = new DiagramEdges();\r\n        this._edges.render(this.container.node());\r\n        this._edges.setData(data);\r\n    }\r\n\r\n    _renderNodes(layout) {\r\n        const data = {\r\n            nodes: this._data.nodes,\r\n            edges: this._data.edges,\r\n            selected: this._data.selected,\r\n            layout,\r\n            groupColors: this._groupColors\r\n        };\r\n        this._nodes = new DiagramNodes({\r\n            nodeWidth: this._nodeWidth,\r\n            mouseControl: this._mouseControl,\r\n            iconFontFamily: this._iconFontFamily\r\n        });\r\n\r\n        this._nodes.render(this.container.node())\r\n            .on(\"selectNode\", (name) => {\r\n                this._observable.fire(\"selectNode\", name);\r\n            })\r\n            .on(\"deselectNode\", (name, highlightDeselected) => {\r\n                this._observable.fire(\"deselectNode\", name, highlightDeselected);\r\n            })\r\n            .on(\"highlightNode\", (name) => {\r\n                this._observable.fire(\"highlightNode\", name);\r\n            })\r\n            .on(\"unhighlightNode\", (name) => {\r\n                this._observable.fire(\"unhighlightNode\", name);\r\n            });\r\n\r\n        this._nodes.setData(data);\r\n    }\r\n\r\n    hasRenderedNodes() {\r\n        return this._hasRenderedNodes;\r\n    }\r\n\r\n    selectNode(name) {\r\n        this._nodes.selectNode(name);\r\n    }\r\n\r\n    deselectNode(name) {\r\n        this._nodes.deselectNode(name);\r\n    }\r\n\r\n    highlightNode(name) {\r\n        this._nodes.highlightNode(name);\r\n    }\r\n\r\n    unhighlightNode() {\r\n        this._nodes.unhighlightNode();\r\n    }\r\n\r\n    zoomIn() {\r\n        if (!this._zoomable) {\r\n            return;\r\n        }\r\n        const targetScale = this._currentScale + 0.1;\r\n        this._zoom.scaleTo(\r\n            this._wrapper.transition().duration(this._transitionDuration),\r\n            targetScale\r\n        );\r\n    }\r\n\r\n    zoomOut() {\r\n        if (!this._zoomable) {\r\n            return;\r\n        }\r\n        const targetScale = this._currentScale - 0.1;\r\n        this._zoom.scaleTo(\r\n            this._wrapper.transition().duration(this._transitionDuration),\r\n            targetScale\r\n        );\r\n    }\r\n\r\n    fullExtent() {\r\n        if (!this._zoomable) {\r\n            return;\r\n        }\r\n        this._zoom.scaleTo(\r\n            this._wrapper.transition().duration(this._transitionDuration),\r\n            this._zoomOutScale\r\n        );\r\n    }\r\n\r\n    getZoomScaleExtent() {\r\n        return [this._zoomOutScale, 1];\r\n    }\r\n\r\n    reloadZoom() {\r\n        if (!this._zoom) {\r\n            return;\r\n        }\r\n\r\n        this._zoom.on(\"zoom\", null);\r\n\r\n        const lastScale = this._currentScale;\r\n        this._doZoom(this._graphSize);\r\n\r\n        if (lastScale < this._zoomOutScale) {\r\n            this._zoom.scaleTo(\r\n                this._wrapper.transition().duration(this._transitionDuration),\r\n                this._zoomOutScale\r\n            );\r\n        } else {\r\n            this._zoom.scaleTo(\r\n                this._wrapper,\r\n                lastScale\r\n            );\r\n        }\r\n    }\r\n\r\n    _clearData() {\r\n        this._zoom.on(\"zoom\", null);\r\n        this._dataEdges = null;\r\n        this._dataNodes = null;\r\n        this._edges = null;\r\n        this._nodes = null;\r\n        this._elk = null;\r\n    }\r\n}\r\n\r\nexport default Diagram;\r\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","Component","className","_container","_className","_observable","_svg","eventName","on","off","selector","x","y","d3","append","attr","style","destroy","_renderContainer","datum","fire","isRendered","clearData","remove","_clearData","_data","data","_setData","NODE_HEIGHT","DiagramEdges","container","selectAll","_renderDefs","_renderEdges","layout","edges","forEach","edge","link","_this2","d","sections","path","startPoint","endPoint","lastPoint","bendPoints","bendPoint","nextPoint","params","_getSectionParams","section","_getSection","endSection","type","defaultRadius","isEnd","curve","line","radius","diff","rounded","lastRounded","nextRounded","keys","abs","Math","key","lineEndCorrection","lastX","current","lastY","nextY","nextX","concat","point","round","DiagramNode","nodeWidth","iconFontFamily","_nodeWidth","_iconFontFamily","add","_node","node","_selected","selected","_selectedMuted","selectedMuted","_selectedSubsequent","selectedSubsequent","_styles","styles","_groupColor","groupColor","_renderAll","_renderGradients","_renderNodeBaseLayer","_renderNodeSkeleton","icon","_renderIcon","_renderLine","_setNodeStyle","_rendertNodeName","_gradientEdge","_defs","_renderDefaultGradient","_renderMutedGradient","_defaultGradient","name","offset","color","opacity","enter","_mutedGradient","_nodeBaseLayer","width","height","_nodeSkeleton","_icon","NODE_GROUP_WIDTH","ICON_FONT_SIZE","text","_line","_setSpecialStyle","_highlighted","_highlightedSubsequent","_highlightedMuted","_setOriginalStyle","_setMutedStyle","_clipPath","_nodeNameMask","_nodeName","NODE_NAME_FONT_SIZE","value","DiagramNodes","mouseControl","_mouseControl","_dataNodes","nodes","_dataEdges","_layout","_groupColors","groupColors","_subsequentNodes","_getSubsequentNodes","_createNodes","_renderNodes","_setNodeData","_doSelecting","_doHighlighting","obj","item","_this3","_findEdgesRecursive","map","end","names","alreadySearched","results","filteredEdges","filter","start","namesToFind","result","_nodes","_this4","_this5","_getStyles","children","render","isSelected","_enterTimeout","setTimeout","subsequentNodes","diagramNode","_this6","isSubsequentNode","muted","setSelected","setSelectedSubsequent","setSelectedMuted","setStyle","highlightDeselected","_this7","highlighted","setHighlighted","setHighlightedSubsequent","setHighlightedMuted","_this8","group","setData","selectNode","deselectNode","highlightNode","unhighlightNode","nodeHeight","elkWorkerUrl","zoomable","_nodeHeight","_elkWorkerUrl","_zoomable","_hasRenderedNodes","_currentScale","_transitionDuration","_elk","ELK","_this","_wrapper","_svgContainer","_renderElk","graph","_getElkGraph","then","_graphSize","_getGraphSize","_doZoom","_centerGraph","_setGraphSize","_getRootProperties","edgesWithBendPoints","flatMap","bendPointsYs","maxEdgesY","max","maxNodesY","_zoom","translateTo","graphSize","svgSize","getBoundingClientRect","classed","_zoomOutScaleWidth","_getZoomOutScale","_zoomOutScaleHeight","_zoomOutScale","min","translateExtent","extent","scaleExtent","_zoomHandler","bind","call","size","transform","k","_edges","targetScale","scaleTo","transition","duration","lastScale"],"mappings":"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"}