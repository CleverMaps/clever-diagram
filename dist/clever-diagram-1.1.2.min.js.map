{"version":3,"file":"clever-diagram-1.1.2.min.js","sources":["../src/utils/Observable.js","../src/Component.js","../src/DiagramDefaults.js","../src/DiagramEdge.js","../src/DiagramEdges.js","../src/DiagramNode.js","../src/DiagramNodes.js","../src/Diagram.js"],"sourcesContent":["/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Bind event\r\n     * @param {String} event event name\r\n     * @param {Function} handler event handler\r\n     */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        this._handlers[event].push(handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Unbind event\r\n     * @param {String} event event name\r\n     * @param {Function} [handler] event handler, optional\r\n     */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        if (!handler) {\r\n            this._handlers[event] = [];\r\n        } else {\r\n            var handlers = this._handlers[event];\r\n            var index = handlers.indexOf(handler);\r\n            if (index != -1){\r\n                handlers.splice(index, 1);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Add new event to be handled\r\n     * @param {String} event\r\n     */\r\n    add(event) {\r\n        if (!(event in this._handlers)) {\r\n            this._handlers[event] = [];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Fire widget event\r\n     * @param {String} event event name\r\n     * @param {*} ...args event arguments\r\n     */\r\n    fire(event, ...args) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        var handlers = this._handlers[event];\r\n        for (var i = 0; i < handlers.length; i++) {\r\n            handlers[i].apply(this, args);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Destroys this observable, removes events and so on\r\n     */\r\n    destroy() {\r\n        this._handlers = null;\r\n        return this;\r\n    }\r\n\r\n}","import Observable from \"./utils/Observable\";\r\nimport style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nclass Component {\r\n\r\n    constructor(\r\n        className = \"component\"\r\n    ) {\r\n        this._container = null;\r\n        this._className = className;\r\n\r\n        this._observable = new Observable([\r\n            \"enter\",\r\n            \"leave\",\r\n            \"click\"\r\n        ]);\r\n\r\n        this._lastData = null;\r\n        this._svg = null;\r\n    }\r\n\r\n    on(eventName, handler) {\r\n        this._observable.on(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    off(eventName, handler) {\r\n        this._observable.off(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    get className() {\r\n        return this._className;\r\n    }\r\n\r\n    get container() {\r\n        return this._container;\r\n    }\r\n\r\n    get observable() {\r\n        return this._observable;\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0){\r\n\r\n        return d3.select(selector).append(\"g\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n\r\n    }\r\n\r\n    render(selector, x = 0, y = 0, index = 0){\r\n        this.destroy();\r\n\r\n        this._container = this._renderContainer(selector, x, y);\r\n\r\n        if (!this._container) {\r\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\r\n        }\r\n\r\n        this._container.datum(index);\r\n\r\n        this._container\r\n            .on(\"click\", (index) => {\r\n                this._observable.fire(\"click\", index);\r\n            })\r\n            .on(\"mouseenter\", (index) => {\r\n                this._observable.fire(\"enter\", index);\r\n            })\r\n            .on(\"mouseleave\", (index) => {\r\n                this._observable.fire(\"leave\", index);\r\n            });\r\n\r\n        return this;\r\n    }\r\n\r\n    destroy(){\r\n        if (this.isRendered()) {\r\n            this._lastData = null;\r\n            this.clearData();\r\n            this._container.datum(null);\r\n            this._container.remove();\r\n            this._container = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearData() {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call clearData() when widget is not rendered, please call .render() first.\";\r\n        }\r\n        this._clearData();\r\n        this._data = null;\r\n        return this;\r\n    }\r\n\r\n    isRendered(){\r\n        return this._container !== null;\r\n    }\r\n\r\n    setData(data) {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call setData() when component is not rendered, please call .render() first.\";\r\n        }\r\n        this._setData(this._container, data, this._lastData);\r\n        this._lastData = Object.assign({}, this._lastData, data);\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Component;\r\n","\r\nexport const DIAGRAM_MARGIN = 50;\r\nexport const NODE_WIDTH = 190;\r\nexport const NODE_HEIGHT = 40;\r\nexport const NODE_GROUP_WIDTH = 40;\r\n\r\nexport const MOUSE_CONTROL = true;\r\n\r\nexport const ICON_FONT_SIZE = 18;\r\nexport const NODE_NAME_FONT_SIZE = 13;\r\n\r\nexport const NODE_ICON_COLOR = '#4a4a4a';\r\nexport const NODE_NAME_COLOR = '#4a4a4a';\r\nexport const NODE_DEFAULT_BG = 'rgba(255,255,255,1)';\r\nexport const NODE_SELECTED_BG = '#f8e71c';\r\nexport const NODE_MUTED_BG = '#f0f0f0';\r\nexport const NODE_GROUP_COLOR_DEFAULT = '#2196F3';\r\nexport const NODE_GROUP_COLOR_MUTED = '#d5d5d5';\r\nexport const NODE_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR_MUTED = '#bababa';\r\n","import Component from './Component';\r\nimport {\r\n    EDGES_STROKE_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdge extends Component {\r\n    constructor() {\r\n        super('diagram-edge');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._selected = data.selected;\r\n        this._muted = data.muted;\r\n\r\n        this._renderEdge(data);\r\n    }\r\n\r\n    _renderEdge(data) {\r\n        const markerEnd = this._muted ? `url(#end-muted)` : `url(#end)`;\r\n        const strokeColor = this._muted ? EDGES_STROKE_COLOR_MUTED : EDGES_STROKE_COLOR;\r\n\r\n        this._edge = this.container.append(\"path\")\r\n            .attr(\"class\", \"link\")\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke-linejoin\", \"bevel\")\r\n            .attr(\"fill\", \"transparent\")\r\n            .attr(\"d\", () => {\r\n                const d = data.layout.sections[0];\r\n                let path = \"\";\r\n                if (d.startPoint && d.endPoint) {\r\n                    path += `M${d.startPoint.x} ${d.startPoint.y} `;\r\n\r\n                    const defaultRadius = 6;\r\n                    let lastPoint = {\r\n                        x: d.startPoint.x,\r\n                        y: d.startPoint.y\r\n                    };\r\n\r\n                    (d.bendPoints || []).forEach((bendPoint, index) => {\r\n\r\n                        const nextPoint = d.bendPoints[index + 1] || d.endPoint;\r\n\r\n                        const params = this._getSectionParams(\r\n                            bendPoint,\r\n                            lastPoint,\r\n                            nextPoint,\r\n                            defaultRadius\r\n                        );\r\n\r\n                        const section = this._getSection(params);\r\n\r\n                        path += section;\r\n\r\n                        lastPoint.x = bendPoint.x;\r\n                        lastPoint.y = bendPoint.y;\r\n\r\n                    }, this);\r\n\r\n                    const isEnd = true;\r\n                    const nextPoint = {};\r\n                    const params = this._getSectionParams(\r\n                        d.endPoint,\r\n                        lastPoint,\r\n                        nextPoint,\r\n                        defaultRadius,\r\n                        isEnd\r\n                    );\r\n\r\n                    const endSection = this._getSection(params);\r\n\r\n                    path += endSection;\r\n                }\r\n\r\n                return path;\r\n            });\r\n\r\n        if (data.edge.type == \"arrow\") {\r\n            this._edge.attr(\"marker-end\", markerEnd);\r\n        }\r\n    }\r\n\r\n    _getSection(params) {\r\n        const {x, y, defaultRadius, isEnd} = params;\r\n\r\n        let curve = '';\r\n        let line = '';\r\n        let radius = defaultRadius;\r\n\r\n        const diff = {\r\n            lastX: x.rounded - x.lastRounded,\r\n            lastY: y.rounded - y.lastRounded,\r\n            nextX: x.nextRounded - x.rounded,\r\n            nextY: y.nextRounded - y.rounded\r\n        };\r\n\r\n        Object.keys(diff).forEach(key => {\r\n            const abs = Math.abs(diff[key]);\r\n            if (abs && abs < radius) {\r\n                radius = abs / 2;\r\n            }\r\n        });\r\n\r\n        const lineEndCorrection = isEnd ? 0 : radius;\r\n\r\n        // DRAW LINE\r\n        if (diff.lastX > 0) {\r\n            // to right\r\n            line = `L ${x.current - lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastX < 0) {\r\n            // to left\r\n            line = `L ${x.current + lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastY > 0) {\r\n            // to bottom\r\n            line = `L ${x.current} ${y.current - lineEndCorrection} `;\r\n        } else if (diff.lastY < 0) {\r\n            // to top\r\n            line = `L ${x.current} ${y.current + lineEndCorrection} `;\r\n        }\r\n\r\n        // DRAW CURVE\r\n        if (!isEnd) {\r\n            if (diff.nextY > 0) {\r\n                // to bottom\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current + radius} `;\r\n            } else if (diff.nextY < 0) {\r\n                // to top\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current - radius} `;\r\n            } else if (diff.nextX < 0) {\r\n                // to left\r\n                curve = `Q ${x.current} ${y.current} ${x.current - radius} ${y.current} `;\r\n            } else if (diff.nextX > 0) {\r\n                // to right\r\n                curve = `Q ${x.current} ${y.current} ${x.current + radius} ${y.current} `;\r\n            }\r\n        }\r\n\r\n        return line.concat(curve);\r\n    }\r\n\r\n    _getSectionParams(\r\n        point,\r\n        lastPoint,\r\n        nextPoint,\r\n        defaultRadius,\r\n        isEnd = false\r\n    ) {\r\n        return {\r\n            x: {\r\n                current: point.x,\r\n                last: lastPoint.x,\r\n                next: nextPoint.x,\r\n                rounded: Math.round(point.x),\r\n                lastRounded: Math.round(lastPoint.x),\r\n                nextRounded: Math.round(nextPoint.x)\r\n            },\r\n            y: {\r\n                current: point.y,\r\n                last: lastPoint.y,\r\n                next: nextPoint.y,\r\n                rounded: Math.round(point.y),\r\n                lastRounded: Math.round(lastPoint.y),\r\n                nextRounded: Math.round(nextPoint.y)\r\n            },\r\n            defaultRadius,\r\n            isEnd\r\n        };\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setMuted(value) {\r\n        this._muted = value;\r\n    }\r\n\r\n    setStyle() {\r\n        if (this._muted) {\r\n            this._edge.attr('stroke', EDGES_STROKE_COLOR_MUTED);\r\n            this._edge.attr(\"marker-end\", \"url(#end-muted)\");\r\n        } else {\r\n            this._edge.attr('stroke', EDGES_STROKE_COLOR);\r\n            this._edge.attr(\"marker-end\", \"url(#end)\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default DiagramEdge;\r\n","import Component from './Component';\r\nimport DiagramEdge from './DiagramEdge';\r\nimport {\r\n    EDGES_STROKE_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdges extends Component {\r\n    constructor() {\r\n        super('diagram-edges');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._renderDefs('end', EDGES_STROKE_COLOR);\r\n        this._renderDefs('end-muted', EDGES_STROKE_COLOR_MUTED);\r\n\r\n        this._createEdges(data);\r\n        this._renderEdges();\r\n\r\n        this._data = data;\r\n        this._subsequentNodes = data.subsequentNodes;\r\n        this._selected = data.selected;\r\n\r\n        data.edges.forEach((edge, index) => this._setEdgeData(edge, index));\r\n    }\r\n\r\n    _createEdges(data) {\r\n        this._edges = data.edges.map(() => {\r\n            return new DiagramEdge();\r\n        });\r\n    }\r\n\r\n    _renderEdges() {\r\n        this._edges.forEach((edge, index) => {\r\n            edge.render(this.container.node(), 0, 0, index);\r\n        });\r\n    }\r\n\r\n    _setEdgeData(edge, index) {\r\n        const layout = this._data.layout.edges[index];\r\n\r\n\r\n        const selected = this._selected === edge.start;\r\n        let isSubsequentNode = false;\r\n\r\n        if (this._selected) {\r\n            isSubsequentNode = this._isSubsequentNode(this._selected, edge.start);\r\n        }\r\n\r\n        const muted = this._selected && !(selected || isSubsequentNode);\r\n\r\n        this._edges[index].setData({\r\n            edge,\r\n            layout,\r\n            selected,\r\n            muted\r\n        });\r\n    }\r\n\r\n    _renderDefs(id, color) {\r\n        this.container.append(\"svg:defs\")\r\n            .append(\"svg:marker\")\r\n            .attr(\"id\", id)\r\n            .attr(\"viewBox\", \"0 -5 10 10\")\r\n            .attr(\"refX\", 10)\r\n            .attr(\"refY\", 0)\r\n            .attr(\"markerWidth\", 5)\r\n            .attr(\"markerHeight\", 5)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"fill\", color)\r\n            .style(\"stroke-opacity\", 0.6)\r\n            .append(\"svg:path\")\r\n            .attr(\"d\", \"M0,-5L10,0L0,5\");\r\n    }\r\n\r\n    selectEdges(name) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const isSubsequentNode = this._isSubsequentNode(name, edge.start);\r\n            const selected = (name === edge.start) || isSubsequentNode;\r\n\r\n            diagramEdge.setSelected(selected);\r\n            diagramEdge.setMuted(!selected);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectEdges(isSomeHighlighted) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const muted = isSomeHighlighted && diagramEdge._muted;\r\n\r\n            diagramEdge.setMuted(muted);\r\n            diagramEdge.setSelected(false);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    highlightEdges(name) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const isSubsequentNode = this._isSubsequentNode(name, edge.start);\r\n            const highlighted = (name === edge.start) || isSubsequentNode;\r\n\r\n            diagramEdge.setMuted(!highlighted);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightEdges(isSomeSelected) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const muted = isSomeSelected && !diagramEdge._selected;\r\n\r\n            diagramEdge.setMuted(muted);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    _isSubsequentNode(nodeName, edgeStart) {\r\n        const subsequentNodes = this._subsequentNodes[nodeName];\r\n        return subsequentNodes.indexOf(edgeStart) >= 0;\r\n    }\r\n}\r\n\r\nexport default DiagramEdges;\r\n","import style from \"./CleverDiagram.css\";\r\nimport Component from './Component';\r\nimport {\r\n    NODE_HEIGHT,\r\n    ICON_FONT_SIZE,\r\n    NODE_SELECTED_BG,\r\n    NODE_DEFAULT_BG,\r\n    NODE_MUTED_BG,\r\n    NODE_GROUP_COLOR_MUTED,\r\n    NODE_GROUP_WIDTH,\r\n    NODE_STROKE_COLOR,\r\n    NODE_NAME_FONT_SIZE,\r\n    NODE_ICON_COLOR,\r\n    NODE_NAME_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramNode extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily\r\n        }\r\n    ) {\r\n        super('diagram-node');\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._observable\r\n            .add(\"enterNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._node = data.node;\r\n        this._selected = data.selected;\r\n        this._selectedMuted = data.selectedMuted;\r\n        this._selectedSubsequent = data.selectedSubsequent;\r\n        this._styles = data.styles;\r\n        this._groupColor = data.groupColor;\r\n\r\n        this._renderAll();\r\n    }\r\n\r\n    _renderAll() {\r\n        this._renderGradients();\r\n        this._renderNodeBaseLayer();\r\n        this._renderNodeSkeleton();\r\n\r\n        if (this._node.icon) {\r\n            this._renderIcon();\r\n        }\r\n\r\n        this._renderLine();\r\n        this._setNodeStyle();\r\n        this._rendertNodeName();\r\n    }\r\n\r\n    _renderGradients() {\r\n        this._gradientEdge = NODE_GROUP_WIDTH/this._nodeWidth;\r\n\r\n        this._defs = this.container.append(\"svg:defs\");\r\n\r\n        this._renderDefaultGradient();\r\n        this._renderMutedGradient();\r\n    }\r\n\r\n    _renderDefaultGradient() {\r\n        const colorDefaultBg = NODE_DEFAULT_BG;\r\n\r\n        this._defaultGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", `node-background-default-${this._node.name}`);\r\n\r\n        this._defaultGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge, color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge + 0.001, color: colorDefaultBg, opacity: '1'},\r\n                { offset: \"1\", color: colorDefaultBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderMutedGradient() {\r\n        const colorMutedBg = NODE_MUTED_BG;\r\n        const colorGroupMuted= NODE_GROUP_COLOR_MUTED;\r\n\r\n        this._mutedGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", \"node-background-muted\");\r\n\r\n        this._mutedGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge, color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge + 0.001, color: colorMutedBg, opacity: '1'},\r\n                { offset: \"1\", color: colorMutedBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderNodeBaseLayer() {\r\n        this._nodeBaseLayer = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"rx\", 5);\r\n    }\r\n\r\n    _renderNodeSkeleton() {\r\n        this._nodeSkeleton = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"rx\", 5)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"class\", style['node-skeleton'])\r\n            .attr(\"id\", this._node.name);\r\n    }\r\n\r\n    _renderIcon() {\r\n        this._icon = this.container.append(\"text\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH/2)\r\n            .attr(\"y\", (this._styles.height/2 + ICON_FONT_SIZE/2) - 1)\r\n            .attr(\"class\", style['node-icon'])\r\n            .attr(\"font-family\", this._iconFontFamily)\r\n            .attr(\"font-size\", ICON_FONT_SIZE)\r\n            .attr(\"fill\", NODE_ICON_COLOR)\r\n            .text(this._node.icon);\r\n    }\r\n\r\n    _renderLine() {\r\n        this._line = this.container\r\n            .append(\"line\")\r\n            .attr(\"x1\", NODE_GROUP_WIDTH)\r\n            .attr(\"y1\", 0)\r\n            .attr(\"x2\", NODE_GROUP_WIDTH)\r\n            .attr(\"y2\", NODE_GROUP_WIDTH)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"opacity\", 0);\r\n    }\r\n\r\n    _setNodeStyle() {\r\n        if (this._selected) {\r\n            this._setSpecialStyle(NODE_SELECTED_BG, 1);\r\n        } else if (this._highlighted) {\r\n            this._setSpecialStyle(this._groupColor, 0.4);\r\n        } else if (!this._highlightedSubsequent && (this._selectedMuted || this._highlightedMuted)) {\r\n            this._setMutedStyle();\r\n        } else {\r\n            this._setOriginalStyle();\r\n        }\r\n    }\r\n\r\n    _rendertNodeName() {\r\n        this._clipPath = this._defs\r\n            .append(\"clipPath\")\r\n            .attr(\"id\", \"node-name-mask\");\r\n\r\n        this._nodeNameMask = this._clipPath\r\n            .append(\"rect\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._nodeWidth - NODE_GROUP_WIDTH - 25)\r\n            .attr(\"height\", this._styles.height);\r\n\r\n        this._nodeName = this.container\r\n            .append(\"g\")\r\n            .attr(\"clip-path\", \"url(#node-name-mask)\")\r\n            .append(\"text\")\r\n            .text(this._node.name)\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", (NODE_HEIGHT/2 + NODE_NAME_FONT_SIZE/2) - 2)\r\n            .attr(\"font-size\", NODE_NAME_FONT_SIZE)\r\n            .attr(\"fill\", NODE_NAME_COLOR)\r\n            .attr(\"class\", style[\"node-name\"]);\r\n    }\r\n\r\n    setStyle() {\r\n        this._setNodeStyle();\r\n    }\r\n\r\n    isSelected() {\r\n        return this._selected;\r\n    }\r\n\r\n    isSelectedSubsequent() {\r\n        return this._selectedSubsequent;\r\n    }\r\n\r\n    isHighlighted() {\r\n        return this._highlighted;\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setSelectedSubsequent(value) {\r\n        this._selectedSubsequent = value;\r\n    }\r\n\r\n    setHighlighted(value) {\r\n        this._highlighted = value;\r\n    }\r\n\r\n    setHighlightedSubsequent(value) {\r\n        this._highlightedSubsequent = value;\r\n    }\r\n\r\n    setSelectedMuted(value) {\r\n        this._selectedMuted = value;\r\n    }\r\n\r\n    setHighlightedMuted(value) {\r\n        this._highlightedMuted = value;\r\n    }\r\n\r\n    _setSpecialStyle(color, opacity) {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", color)\r\n            .attr(\"fill-opacity\", opacity)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR);\r\n        this._line.attr(\"opacity\", \"1\");\r\n    }\r\n\r\n    _setMutedStyle() {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", \"url(#node-background-muted\")\r\n            .attr(\"fill-opacity\", \"1\")\r\n            .attr(\"stroke\", EDGES_STROKE_COLOR_MUTED);\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n\r\n    _setOriginalStyle() {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"fill-opacity\", \"1\")\r\n            .attr(\"stroke\", NODE_STROKE_COLOR);\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n}\r\n\r\nexport default DiagramNode;\r\n","import Component from './Component';\r\nimport DiagramNode from './DiagramNode';\r\nimport {NODE_GROUP_COLOR_DEFAULT} from './DiagramDefaults';\r\n\r\nclass DiagramNodes extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily,\r\n            mouseControl\r\n        }\r\n    ) {\r\n        super('diagram-nodes');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n        this._mouseControl = mouseControl;\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataNodes = data.nodes;\r\n        this._dataEdges = data.edges;\r\n        this._layout = data.layout;\r\n        this._groupColors = data.groupColors;\r\n        this._selected = data.selected;\r\n        this._subsequentNodes = data.subsequentNodes;\r\n\r\n        this._createNodes(data);\r\n        this._renderNodes();\r\n\r\n        data.nodes.forEach((node, index) => this._setNodeData(node, index));\r\n    }\r\n\r\n    _createNodes(data) {\r\n        this._nodes = data.nodes.map(() => {\r\n            return new DiagramNode({\r\n                nodeWidth: this._nodeWidth,\r\n                iconFontFamily: this._iconFontFamily\r\n            });\r\n        });\r\n    }\r\n\r\n    _renderNodes() {\r\n        this._nodes.forEach((node, index) => {\r\n            const name = this._dataNodes[index].name;\r\n            const styles = this._getStyles(this._layout.children[index]);\r\n            node.render(this.container.node(), styles.x, styles.y, index);\r\n            if (this._mouseControl) {\r\n                node\r\n                    .on(\"click\", (index) => {\r\n                        if (this._nodes[index].isSelected()) {\r\n                            this._observable.fire(\"deselectNode\", name);\r\n                        } else {\r\n                            this._observable.fire(\"selectNode\", name);\r\n                        }\r\n                    })\r\n                    .on(\"enter\", () => {\r\n                        this._enterTimeout = setTimeout(() => {\r\n                            this._observable.fire(\"highlightNode\", name);\r\n                        }, 150);\r\n                    })\r\n                    .on(\"leave\", () => {\r\n                        clearTimeout(this._enterTimeout);\r\n                        this._observable.fire(\"unhighlightNode\");\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    selectNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const selected = name === node.name;\r\n            const muted = !(selected || isSubsequentNode);\r\n\r\n            diagramNode.setSelected(selected);\r\n            diagramNode.setSelectedSubsequent(isSubsequentNode);\r\n            diagramNode.setSelectedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectNode() {\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n\r\n            diagramNode.setSelected(false);\r\n            diagramNode.setSelectedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n\r\n    }\r\n\r\n    highlightNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const highlighted = name === node.name;\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const muted = !(highlighted || isSubsequentNode);\r\n\r\n            diagramNode.setHighlighted(highlighted);\r\n            diagramNode.setHighlightedSubsequent(isSubsequentNode);\r\n            diagramNode.setHighlightedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightNode() {\r\n        this._nodes.forEach((diagramNode) => {\r\n            diagramNode.setHighlighted(false);\r\n            diagramNode.setHighlightedSubsequent(false);\r\n            diagramNode.setHighlightedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    _setNodeData(node, index) {\r\n        const styles = this._getStyles(this._layout.children[index]);\r\n        const groupColor = this._groupColors[node.group] || NODE_GROUP_COLOR_DEFAULT;\r\n        const selected = this._selected === node.name;\r\n        let selectedMuted, selectedSubsequent = false;\r\n\r\n        if (this._selected) {\r\n            const subsequentNodes = this._subsequentNodes[this._selected];\r\n            const isSubsequentNode = subsequentNodes && subsequentNodes.indexOf(node.name) >= 0;\r\n            selectedMuted = !isSubsequentNode;\r\n            selectedSubsequent = isSubsequentNode;\r\n        }\r\n\r\n        this._nodes[index].setData({\r\n            node,\r\n            selected,\r\n            selectedSubsequent,\r\n            selectedMuted,\r\n            styles,\r\n            groupColor\r\n        });\r\n    }\r\n\r\n    _getStyles(layout) {\r\n        return {\r\n            y: layout.y,\r\n            x: layout.x,\r\n            width: layout.width,\r\n            height: layout.height\r\n        };\r\n    }\r\n\r\n    isSomeSelected() {\r\n        return this._nodes.some(node => node.isSelected());\r\n    }\r\n\r\n    isSomeHighlighted() {\r\n        return this._nodes.some(node => node.isHighlighted());\r\n    }\r\n}\r\n\r\nexport default DiagramNodes;\r\n","import style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\nimport * as ELK from \"ELK\";\r\nimport Component from './Component';\r\nimport DiagramEdges from './DiagramEdges';\r\nimport DiagramNodes from './DiagramNodes';\r\nimport {\r\n    DIAGRAM_MARGIN,\r\n    NODE_WIDTH,\r\n    NODE_HEIGHT,\r\n    MOUSE_CONTROL\r\n} from './DiagramDefaults';\r\n\r\n/**\r\n * @class\r\n * Main Diagram class\r\n * @param {Object} options\r\n */\r\nclass Diagram extends Component {\r\n    constructor({\r\n        nodeWidth = NODE_WIDTH,\r\n        nodeHeight = NODE_HEIGHT,\r\n        groupColors = {},\r\n        elkWorkerUrl,\r\n        diagramMargin = DIAGRAM_MARGIN,\r\n        mouseControl = MOUSE_CONTROL,\r\n        iconFontFamily\r\n    }) {\r\n        super('diagram');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._nodeHeight = nodeHeight;\r\n        this._groupColors = groupColors;\r\n        this._elkWorkerUrl = elkWorkerUrl;\r\n        this._diagramMargin = diagramMargin;\r\n        this._mouseControl = mouseControl;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._hasRenderedNodes = false;\r\n\r\n        this._elk = new ELK({\r\n            workerUrl: this._elkWorkerUrl\r\n        });\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\");\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0) {\r\n        return d3.select(selector).append(\"svg\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataEdges = data.edges || [];\r\n        this._dataNodes = data.nodes || [];\r\n        this._data = data;\r\n\r\n        this._renderElk();\r\n    }\r\n\r\n    _renderElk() {\r\n        const graph = this._getElkGraph();\r\n\r\n        return this._elk.layout(graph).then(layout => {\r\n            const subsequentNodes = this._getSubsequentNodes(this._data);\r\n\r\n            this._renderEdges(layout, subsequentNodes);\r\n            this._renderNodes(layout, subsequentNodes);\r\n            this._setGraphSize(layout.children, layout.edges);\r\n            this._hasRenderedNodes = true;\r\n        });\r\n    }\r\n\r\n    _getElkGraph() {\r\n        return {\r\n            \"id\": \"root\",\r\n            properties: this._getRootProperties(),\r\n            \"children\": this._dataNodes.map(node => {\r\n                return {\r\n                    id: node.name,\r\n                    width: this._nodeWidth,\r\n                    height: this._nodeHeight\r\n                };\r\n            }),\r\n            \"edges\": this._dataEdges.map((edge, index) => {\r\n                return {\r\n                    id: \"edge_\" + index,\r\n                    sources: [edge.start],\r\n                    targets: [edge.end]\r\n                };\r\n            })\r\n        };\r\n    }\r\n\r\n    _getRootProperties(){\r\n        return {\r\n            'algorithm': 'layered',\r\n            'direction':'RIGHT'\r\n        };\r\n    }\r\n\r\n    _getSubsequentNodes(data) {\r\n        return data.nodes.reduce((obj, item) => {\r\n            const edges = this._findEdgesRecursive(data.edges, [item.name]);\r\n            obj[item.name] = edges.map(edge => edge.end);\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n    _findEdgesRecursive(edges, names, alreadySearched=[]) {\r\n        let results = names.reduce((acc, cur) => {\r\n            if (alreadySearched.indexOf(cur) >= 0) {\r\n                return acc;\r\n            }\r\n\r\n            const filteredEdges = edges.filter(edge => edge.start === cur);\r\n\r\n            return acc.concat(filteredEdges);\r\n        }, []);\r\n\r\n        const namesToFind = results.map(result => result.end);\r\n        alreadySearched = alreadySearched.concat(names);\r\n\r\n        if (namesToFind.length) {\r\n            return results.concat(this._findEdgesRecursive(this._dataEdges, namesToFind, alreadySearched));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    _setGraphSize(nodes, edges) {\r\n        const edgesWithBendPoints = edges.flatMap(edge => edge.sections.filter(section => section.bendPoints));\r\n        const bendPointsYs = edgesWithBendPoints.flatMap(edge => edge.bendPoints.flatMap(bendPoint => bendPoint.y));\r\n        const maxEdgesY = Math.max.apply(Math, bendPointsYs);\r\n        const maxNodesY = Math.max.apply(Math, nodes.map(node => node.y + node.height));\r\n\r\n        const maxHeight = Math.max(maxEdgesY, maxNodesY);\r\n        const maxWidth = Math.max.apply(Math, nodes.map(node => node.x + node.width));\r\n\r\n        this.container.style(\"width\", `${maxWidth + 10}px`);\r\n        this.container.style(\"height\", `${maxHeight + 10}px`);\r\n        this.container.style(\"margin\", `${this._diagramMargin}px`);\r\n    }\r\n\r\n    _renderEdges(layout, subsequentNodes) {\r\n        const data = {\r\n            layout,\r\n            edges: this._dataEdges,\r\n            subsequentNodes,\r\n            selected: this._data.selected,\r\n        };\r\n        this._edges = new DiagramEdges();\r\n        this._edges.render(this.container.node());\r\n        this._edges.setData(data);\r\n    }\r\n\r\n    _renderNodes(layout, subsequentNodes) {\r\n        const data = {\r\n            nodes: this._data.nodes,\r\n            edges: this._data.edges,\r\n            selected: this._data.selected,\r\n            layout,\r\n            groupColors: this._groupColors,\r\n            subsequentNodes\r\n        };\r\n        this._nodes = new DiagramNodes({\r\n            nodeWidth: this._nodeWidth,\r\n            iconFontFamily: this._iconFontFamily,\r\n            mouseControl: this._mouseControl\r\n        });\r\n\r\n        this._nodes.render(this.container.node())\r\n            .on(\"selectNode\", (name) => {\r\n                this._observable.fire(\"selectNode\", name);\r\n            })\r\n            .on(\"deselectNode\", (name, highlightDeselected) => {\r\n                this._observable.fire(\"deselectNode\", name, highlightDeselected);\r\n            })\r\n            .on(\"highlightNode\", (name) => {\r\n                this._observable.fire(\"highlightNode\", name);\r\n            })\r\n            .on(\"unhighlightNode\", (name) => {\r\n                this._observable.fire(\"unhighlightNode\", name);\r\n            });\r\n\r\n        this._nodes.setData(data);\r\n    }\r\n\r\n    hasRenderedNodes() {\r\n        return this._hasRenderedNodes;\r\n    }\r\n\r\n    selectNode(name) {\r\n        this._nodes.selectNode(name);\r\n        this._edges.selectEdges(name);\r\n    }\r\n\r\n    deselectNode(name) {\r\n        const isSomeHighlighted = this._nodes.isSomeHighlighted();\r\n        this._nodes.deselectNode(name);\r\n        this._edges.deselectEdges(isSomeHighlighted);\r\n    }\r\n\r\n    highlightNode(name) {\r\n        this._nodes.highlightNode(name);\r\n        this._edges.highlightEdges(name);\r\n    }\r\n\r\n    unhighlightNode() {\r\n        const isSomeSelected = this._nodes.isSomeSelected();\r\n        this._nodes.unhighlightNode();\r\n        this._edges.unhighlightEdges(isSomeSelected);\r\n    }\r\n\r\n    _clearData() {\r\n        this._dataEdges = null;\r\n        this._dataNodes = null;\r\n        this._edges = null;\r\n        this._nodes = null;\r\n        this._elk = null;\r\n    }\r\n}\r\n\r\nexport default Diagram;\r\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","Component","className","_container","_className","_observable","_lastData","_svg","eventName","on","off","selector","x","y","d3","append","attr","style","destroy","_renderContainer","datum","fire","isRendered","clearData","remove","_clearData","_data","data","_setData","Object","assign","NODE_HEIGHT","DiagramEdge","container","selectAll","_selected","selected","_muted","muted","_renderEdge","markerEnd","strokeColor","_edge","d","layout","sections","path","startPoint","endPoint","lastPoint","bendPoints","forEach","bendPoint","nextPoint","params","_this2","_getSectionParams","section","_getSection","endSection","edge","type","defaultRadius","isEnd","curve","line","radius","diff","rounded","lastRounded","nextRounded","keys","abs","Math","key","lineEndCorrection","lastX","current","lastY","nextY","nextX","concat","point","round","value","DiagramEdges","_renderDefs","_createEdges","_renderEdges","_subsequentNodes","subsequentNodes","edges","_setEdgeData","_edges","map","render","_this3","node","start","isSubsequentNode","_isSubsequentNode","setData","id","color","name","diagramEdge","_this4","setSelected","setMuted","setStyle","isSomeHighlighted","_this5","_this6","highlighted","isSomeSelected","_this7","nodeName","edgeStart","DiagramNode","nodeWidth","iconFontFamily","_nodeWidth","_iconFontFamily","add","_node","_selectedMuted","selectedMuted","_selectedSubsequent","selectedSubsequent","_styles","styles","_groupColor","groupColor","_renderAll","_renderGradients","_renderNodeBaseLayer","_renderNodeSkeleton","icon","_renderIcon","_renderLine","_setNodeStyle","_rendertNodeName","_gradientEdge","_defs","_renderDefaultGradient","_renderMutedGradient","_defaultGradient","offset","opacity","enter","_mutedGradient","_nodeBaseLayer","width","height","_nodeSkeleton","_icon","NODE_GROUP_WIDTH","ICON_FONT_SIZE","text","_line","_setSpecialStyle","_highlighted","_highlightedSubsequent","_highlightedMuted","_setOriginalStyle","_setMutedStyle","_clipPath","_nodeNameMask","_nodeName","NODE_NAME_FONT_SIZE","DiagramNodes","mouseControl","_mouseControl","_dataNodes","nodes","_dataEdges","_layout","_groupColors","groupColors","_createNodes","_renderNodes","_setNodeData","_nodes","_getStyles","children","isSelected","_enterTimeout","setTimeout","diagramNode","setSelectedSubsequent","setSelectedMuted","setHighlighted","setHighlightedSubsequent","setHighlightedMuted","group","some","isHighlighted","nodeHeight","elkWorkerUrl","diagramMargin","_nodeHeight","_elkWorkerUrl","_diagramMargin","_hasRenderedNodes","_elk","ELK","_this","_renderElk","graph","_getElkGraph","then","_getSubsequentNodes","_setGraphSize","_getRootProperties","end","obj","item","_findEdgesRecursive","names","alreadySearched","results","filteredEdges","filter","namesToFind","result","edgesWithBendPoints","flatMap","bendPointsYs","maxEdgesY","max","maxNodesY","maxHeight","maxWidth","highlightDeselected","selectNode","selectEdges","deselectNode","deselectEdges","highlightNode","highlightEdges","unhighlightNode","unhighlightEdges"],"mappings":"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"}
