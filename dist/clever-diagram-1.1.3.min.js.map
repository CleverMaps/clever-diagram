{"version":3,"file":"clever-diagram-1.1.3.min.js","sources":["../src/utils/Observable.js","../src/Component.js","../src/DiagramDefaults.js","../src/DiagramEdge.js","../src/DiagramEdges.js","../src/DiagramNode.js","../src/DiagramNodes.js","../src/Diagram.js"],"sourcesContent":["/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Bind event\r\n     * @param {String} event event name\r\n     * @param {Function} handler event handler\r\n     */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        this._handlers[event].push(handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Unbind event\r\n     * @param {String} event event name\r\n     * @param {Function} [handler] event handler, optional\r\n     */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        if (!handler) {\r\n            this._handlers[event] = [];\r\n        } else {\r\n            var handlers = this._handlers[event];\r\n            var index = handlers.indexOf(handler);\r\n            if (index != -1){\r\n                handlers.splice(index, 1);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Add new event to be handled\r\n     * @param {String} event\r\n     */\r\n    add(event) {\r\n        if (!(event in this._handlers)) {\r\n            this._handlers[event] = [];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Fire widget event\r\n     * @param {String} event event name\r\n     * @param {*} ...args event arguments\r\n     */\r\n    fire(event, ...args) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        var handlers = this._handlers[event];\r\n        for (var i = 0; i < handlers.length; i++) {\r\n            handlers[i].apply(this, args);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Destroys this observable, removes events and so on\r\n     */\r\n    destroy() {\r\n        this._handlers = null;\r\n        return this;\r\n    }\r\n\r\n}","import Observable from \"./utils/Observable\";\r\nimport style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nclass Component {\r\n\r\n    constructor(\r\n        className = \"component\"\r\n    ) {\r\n        this._container = null;\r\n        this._className = className;\r\n\r\n        this._observable = new Observable([\r\n            \"enter\",\r\n            \"leave\",\r\n            \"click\"\r\n        ]);\r\n\r\n        this._svg = null;\r\n    }\r\n\r\n    on(eventName, handler) {\r\n        this._observable.on(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    off(eventName, handler) {\r\n        this._observable.off(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    get className() {\r\n        return this._className;\r\n    }\r\n\r\n    get container() {\r\n        return this._container;\r\n    }\r\n\r\n    get observable() {\r\n        return this._observable;\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0){\r\n\r\n        return d3.select(selector).append(\"g\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n\r\n    }\r\n\r\n    render(selector, x = 0, y = 0, index = 0){\r\n        this.destroy();\r\n\r\n        this._container = this._renderContainer(selector, x, y);\r\n\r\n        if (!this._container) {\r\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\r\n        }\r\n\r\n        this._container.datum(index);\r\n\r\n        this._container\r\n            .on(\"click\", (index) => {\r\n                this._observable.fire(\"click\", index);\r\n            })\r\n            .on(\"mouseenter\", (index) => {\r\n                this._observable.fire(\"enter\", index);\r\n            })\r\n            .on(\"mouseleave\", (index) => {\r\n                this._observable.fire(\"leave\", index);\r\n            });\r\n\r\n        return this;\r\n    }\r\n\r\n    destroy(){\r\n        if (this.isRendered()) {\r\n            this.clearData();\r\n            this._container.datum(null);\r\n            this._container.remove();\r\n            this._container = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearData() {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call clearData() when widget is not rendered, please call .render() first.\";\r\n        }\r\n        this._clearData();\r\n        this._data = null;\r\n        return this;\r\n    }\r\n\r\n    isRendered(){\r\n        return this._container !== null;\r\n    }\r\n\r\n    setData(data) {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call setData() when component is not rendered, please call .render() first.\";\r\n        }\r\n\r\n        return this._setData(this._container, data);\r\n    }\r\n}\r\n\r\nexport default Component;\r\n","\r\nexport const DIAGRAM_MARGIN = 50;\r\nexport const NODE_WIDTH = 190;\r\nexport const NODE_HEIGHT = 40;\r\nexport const NODE_GROUP_WIDTH = 40;\r\n\r\nexport const MOUSE_CONTROL = true;\r\n\r\nexport const ICON_FONT_SIZE = 18;\r\nexport const NODE_NAME_FONT_SIZE = 13;\r\n\r\nexport const NODE_ICON_COLOR = '#4a4a4a';\r\nexport const NODE_NAME_COLOR = '#4a4a4a';\r\nexport const NODE_DEFAULT_BG = 'rgba(255,255,255,1)';\r\nexport const NODE_SELECTED_BG = '#f8e71c';\r\nexport const NODE_MUTED_BG = '#f0f0f0';\r\nexport const NODE_GROUP_COLOR_DEFAULT = '#2196F3';\r\nexport const NODE_GROUP_COLOR_MUTED = '#d5d5d5';\r\nexport const NODE_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR_MUTED = '#bababa';\r\n","import Component from './Component';\r\nimport {\r\n    EDGES_STROKE_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdge extends Component {\r\n    constructor() {\r\n        super('diagram-edge');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._selected = data.selected;\r\n        this._muted = data.muted;\r\n\r\n        this._renderEdge(data);\r\n    }\r\n\r\n    _renderEdge(data) {\r\n        const markerEnd = this._muted ? `url(#end-muted)` : `url(#end)`;\r\n        const strokeColor = this._muted ? EDGES_STROKE_COLOR_MUTED : EDGES_STROKE_COLOR;\r\n\r\n        this._edge = this.container.append(\"path\")\r\n            .attr(\"class\", \"link\")\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke-linejoin\", \"bevel\")\r\n            .attr(\"fill\", \"transparent\")\r\n            .attr(\"d\", () => {\r\n                const d = data.layout.sections[0];\r\n                let path = \"\";\r\n                if (d.startPoint && d.endPoint) {\r\n                    path += `M${d.startPoint.x} ${d.startPoint.y} `;\r\n\r\n                    const defaultRadius = 6;\r\n                    let lastPoint = {\r\n                        x: d.startPoint.x,\r\n                        y: d.startPoint.y\r\n                    };\r\n\r\n                    (d.bendPoints || []).forEach((bendPoint, index) => {\r\n\r\n                        const nextPoint = d.bendPoints[index + 1] || d.endPoint;\r\n\r\n                        const params = this._getSectionParams(\r\n                            bendPoint,\r\n                            lastPoint,\r\n                            nextPoint,\r\n                            defaultRadius\r\n                        );\r\n\r\n                        const section = this._getSection(params);\r\n\r\n                        path += section;\r\n\r\n                        lastPoint.x = bendPoint.x;\r\n                        lastPoint.y = bendPoint.y;\r\n\r\n                    }, this);\r\n\r\n                    const isEnd = true;\r\n                    const nextPoint = {};\r\n                    const params = this._getSectionParams(\r\n                        d.endPoint,\r\n                        lastPoint,\r\n                        nextPoint,\r\n                        defaultRadius,\r\n                        isEnd\r\n                    );\r\n\r\n                    const endSection = this._getSection(params);\r\n\r\n                    path += endSection;\r\n                }\r\n\r\n                return path;\r\n            });\r\n\r\n        if (data.edge.type == \"arrow\") {\r\n            this._edge.attr(\"marker-end\", markerEnd);\r\n        }\r\n    }\r\n\r\n    _getSection(params) {\r\n        const {x, y, defaultRadius, isEnd} = params;\r\n\r\n        let curve = '';\r\n        let line = '';\r\n        let radius = defaultRadius;\r\n\r\n        const diff = {\r\n            lastX: x.rounded - x.lastRounded,\r\n            lastY: y.rounded - y.lastRounded,\r\n            nextX: x.nextRounded - x.rounded,\r\n            nextY: y.nextRounded - y.rounded\r\n        };\r\n\r\n        Object.keys(diff).forEach(key => {\r\n            const abs = Math.abs(diff[key]);\r\n            if (abs && abs < radius) {\r\n                radius = abs / 2;\r\n            }\r\n        });\r\n\r\n        const lineEndCorrection = isEnd ? 0 : radius;\r\n\r\n        // DRAW LINE\r\n        if (diff.lastX > 0) {\r\n            // to right\r\n            line = `L ${x.current - lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastX < 0) {\r\n            // to left\r\n            line = `L ${x.current + lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastY > 0) {\r\n            // to bottom\r\n            line = `L ${x.current} ${y.current - lineEndCorrection} `;\r\n        } else if (diff.lastY < 0) {\r\n            // to top\r\n            line = `L ${x.current} ${y.current + lineEndCorrection} `;\r\n        }\r\n\r\n        // DRAW CURVE\r\n        if (!isEnd) {\r\n            if (diff.nextY > 0) {\r\n                // to bottom\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current + radius} `;\r\n            } else if (diff.nextY < 0) {\r\n                // to top\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current - radius} `;\r\n            } else if (diff.nextX < 0) {\r\n                // to left\r\n                curve = `Q ${x.current} ${y.current} ${x.current - radius} ${y.current} `;\r\n            } else if (diff.nextX > 0) {\r\n                // to right\r\n                curve = `Q ${x.current} ${y.current} ${x.current + radius} ${y.current} `;\r\n            }\r\n        }\r\n\r\n        return line.concat(curve);\r\n    }\r\n\r\n    _getSectionParams(\r\n        point,\r\n        lastPoint,\r\n        nextPoint,\r\n        defaultRadius,\r\n        isEnd = false\r\n    ) {\r\n        return {\r\n            x: {\r\n                current: point.x,\r\n                last: lastPoint.x,\r\n                next: nextPoint.x,\r\n                rounded: Math.round(point.x),\r\n                lastRounded: Math.round(lastPoint.x),\r\n                nextRounded: Math.round(nextPoint.x)\r\n            },\r\n            y: {\r\n                current: point.y,\r\n                last: lastPoint.y,\r\n                next: nextPoint.y,\r\n                rounded: Math.round(point.y),\r\n                lastRounded: Math.round(lastPoint.y),\r\n                nextRounded: Math.round(nextPoint.y)\r\n            },\r\n            defaultRadius,\r\n            isEnd\r\n        };\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setMuted(value) {\r\n        this._muted = value;\r\n    }\r\n\r\n    setStyle() {\r\n        if (this._muted) {\r\n            this._edge.attr('stroke', EDGES_STROKE_COLOR_MUTED);\r\n            this._edge.attr(\"marker-end\", \"url(#end-muted)\");\r\n        } else {\r\n            this._edge.attr('stroke', EDGES_STROKE_COLOR);\r\n            this._edge.attr(\"marker-end\", \"url(#end)\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default DiagramEdge;\r\n","import Component from './Component';\r\nimport DiagramEdge from './DiagramEdge';\r\nimport {\r\n    EDGES_STROKE_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdges extends Component {\r\n    constructor() {\r\n        super('diagram-edges');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._renderDefs('end', EDGES_STROKE_COLOR);\r\n        this._renderDefs('end-muted', EDGES_STROKE_COLOR_MUTED);\r\n\r\n        this._createEdges(data);\r\n        this._renderEdges();\r\n\r\n        this._data = data;\r\n        this._subsequentNodes = data.subsequentNodes;\r\n        this._selected = data.selected;\r\n\r\n        data.edges.forEach((edge, index) => this._setEdgeData(edge, index));\r\n    }\r\n\r\n    _createEdges(data) {\r\n        this._edges = data.edges.map(() => {\r\n            return new DiagramEdge();\r\n        });\r\n    }\r\n\r\n    _renderEdges() {\r\n        this._edges.forEach((edge, index) => {\r\n            edge.render(this.container.node(), 0, 0, index);\r\n        });\r\n    }\r\n\r\n    _setEdgeData(edge, index) {\r\n        const layout = this._data.layout.edges[index];\r\n\r\n\r\n        const selected = this._selected === edge.start;\r\n        let isSubsequentNode = false;\r\n\r\n        if (this._selected) {\r\n            isSubsequentNode = this._isSubsequentNode(this._selected, edge.start);\r\n        }\r\n\r\n        const muted = this._selected && !(selected || isSubsequentNode);\r\n\r\n        this._edges[index].setData({\r\n            edge,\r\n            layout,\r\n            selected,\r\n            muted\r\n        });\r\n    }\r\n\r\n    _renderDefs(id, color) {\r\n        this.container.append(\"svg:defs\")\r\n            .append(\"svg:marker\")\r\n            .attr(\"id\", id)\r\n            .attr(\"viewBox\", \"0 -5 10 10\")\r\n            .attr(\"refX\", 10)\r\n            .attr(\"refY\", 0)\r\n            .attr(\"markerWidth\", 5)\r\n            .attr(\"markerHeight\", 5)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"fill\", color)\r\n            .style(\"stroke-opacity\", 0.6)\r\n            .append(\"svg:path\")\r\n            .attr(\"d\", \"M0,-5L10,0L0,5\");\r\n    }\r\n\r\n    selectEdges(name) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const isSubsequentNode = this._isSubsequentNode(name, edge.start);\r\n            const selected = (name === edge.start) || isSubsequentNode;\r\n\r\n            diagramEdge.setSelected(selected);\r\n            diagramEdge.setMuted(!selected);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectEdges(isSomeHighlighted) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const muted = isSomeHighlighted && diagramEdge._muted;\r\n\r\n            diagramEdge.setMuted(muted);\r\n            diagramEdge.setSelected(false);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    highlightEdges(name) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const isSubsequentNode = this._isSubsequentNode(name, edge.start);\r\n            const highlighted = (name === edge.start) || isSubsequentNode;\r\n\r\n            diagramEdge.setMuted(!highlighted);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightEdges(isSomeSelected) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const muted = isSomeSelected && !diagramEdge._selected;\r\n\r\n            diagramEdge.setMuted(muted);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    _isSubsequentNode(nodeName, edgeStart) {\r\n        const subsequentNodes = this._subsequentNodes[nodeName];\r\n        return subsequentNodes.indexOf(edgeStart) >= 0;\r\n    }\r\n}\r\n\r\nexport default DiagramEdges;\r\n","import style from \"./CleverDiagram.css\";\r\nimport Component from './Component';\r\nimport {\r\n    NODE_HEIGHT,\r\n    ICON_FONT_SIZE,\r\n    NODE_SELECTED_BG,\r\n    NODE_DEFAULT_BG,\r\n    NODE_MUTED_BG,\r\n    NODE_GROUP_COLOR_MUTED,\r\n    NODE_GROUP_WIDTH,\r\n    NODE_STROKE_COLOR,\r\n    NODE_NAME_FONT_SIZE,\r\n    NODE_ICON_COLOR,\r\n    NODE_NAME_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramNode extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily\r\n        }\r\n    ) {\r\n        super('diagram-node');\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._observable\r\n            .add(\"enterNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._node = data.node;\r\n        this._selected = data.selected;\r\n        this._selectedMuted = data.selectedMuted;\r\n        this._selectedSubsequent = data.selectedSubsequent;\r\n        this._styles = data.styles;\r\n        this._groupColor = data.groupColor;\r\n\r\n        this._renderAll();\r\n    }\r\n\r\n    _renderAll() {\r\n        this._renderGradients();\r\n        this._renderNodeBaseLayer();\r\n        this._renderNodeSkeleton();\r\n\r\n        if (this._node.icon) {\r\n            this._renderIcon();\r\n        }\r\n\r\n        this._renderLine();\r\n        this._setNodeStyle();\r\n        this._rendertNodeName();\r\n    }\r\n\r\n    _renderGradients() {\r\n        this._gradientEdge = NODE_GROUP_WIDTH/this._nodeWidth;\r\n\r\n        this._defs = this.container.append(\"svg:defs\");\r\n\r\n        this._renderDefaultGradient();\r\n        this._renderMutedGradient();\r\n    }\r\n\r\n    _renderDefaultGradient() {\r\n        const colorDefaultBg = NODE_DEFAULT_BG;\r\n\r\n        this._defaultGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", `node-background-default-${this._node.name}`);\r\n\r\n        this._defaultGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge, color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge + 0.001, color: colorDefaultBg, opacity: '1'},\r\n                { offset: \"1\", color: colorDefaultBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderMutedGradient() {\r\n        const colorMutedBg = NODE_MUTED_BG;\r\n        const colorGroupMuted= NODE_GROUP_COLOR_MUTED;\r\n\r\n        this._mutedGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", \"node-background-muted\");\r\n\r\n        this._mutedGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge, color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge + 0.001, color: colorMutedBg, opacity: '1'},\r\n                { offset: \"1\", color: colorMutedBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderNodeBaseLayer() {\r\n        this._nodeBaseLayer = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"rx\", 5);\r\n    }\r\n\r\n    _renderNodeSkeleton() {\r\n        this._nodeSkeleton = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"rx\", 5)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"class\", style['node-skeleton'])\r\n            .attr(\"id\", this._node.name);\r\n    }\r\n\r\n    _renderIcon() {\r\n        this._icon = this.container.append(\"text\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH/2)\r\n            .attr(\"y\", (this._styles.height/2 + ICON_FONT_SIZE/2) - 1)\r\n            .attr(\"class\", style['node-icon'])\r\n            .attr(\"font-family\", this._iconFontFamily)\r\n            .attr(\"font-size\", ICON_FONT_SIZE)\r\n            .attr(\"fill\", NODE_ICON_COLOR)\r\n            .text(this._node.icon);\r\n    }\r\n\r\n    _renderLine() {\r\n        this._line = this.container\r\n            .append(\"line\")\r\n            .attr(\"x1\", NODE_GROUP_WIDTH)\r\n            .attr(\"y1\", 0)\r\n            .attr(\"x2\", NODE_GROUP_WIDTH)\r\n            .attr(\"y2\", NODE_GROUP_WIDTH)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"opacity\", 0);\r\n    }\r\n\r\n    _setNodeStyle() {\r\n        if (this._selected) {\r\n            this._setSpecialStyle(NODE_SELECTED_BG, 1);\r\n        } else if (this._highlighted) {\r\n            this._setSpecialStyle(this._groupColor, 0.4);\r\n        } else if (!this._highlightedSubsequent && (this._selectedMuted || this._highlightedMuted)) {\r\n            this._setMutedStyle();\r\n        } else {\r\n            this._setOriginalStyle();\r\n        }\r\n    }\r\n\r\n    _rendertNodeName() {\r\n        this._clipPath = this._defs\r\n            .append(\"clipPath\")\r\n            .attr(\"id\", \"node-name-mask\");\r\n\r\n        this._nodeNameMask = this._clipPath\r\n            .append(\"rect\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._nodeWidth - NODE_GROUP_WIDTH - 25)\r\n            .attr(\"height\", this._styles.height);\r\n\r\n        this._nodeName = this.container\r\n            .append(\"g\")\r\n            .attr(\"clip-path\", \"url(#node-name-mask)\")\r\n            .append(\"text\")\r\n            .text(this._node.name)\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", (NODE_HEIGHT/2 + NODE_NAME_FONT_SIZE/2) - 2)\r\n            .attr(\"font-size\", NODE_NAME_FONT_SIZE)\r\n            .attr(\"fill\", NODE_NAME_COLOR)\r\n            .attr(\"class\", style[\"node-name\"]);\r\n    }\r\n\r\n    setStyle() {\r\n        this._setNodeStyle();\r\n    }\r\n\r\n    isSelected() {\r\n        return this._selected;\r\n    }\r\n\r\n    isSelectedSubsequent() {\r\n        return this._selectedSubsequent;\r\n    }\r\n\r\n    isHighlighted() {\r\n        return this._highlighted;\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setSelectedSubsequent(value) {\r\n        this._selectedSubsequent = value;\r\n    }\r\n\r\n    setHighlighted(value) {\r\n        this._highlighted = value;\r\n    }\r\n\r\n    setHighlightedSubsequent(value) {\r\n        this._highlightedSubsequent = value;\r\n    }\r\n\r\n    setSelectedMuted(value) {\r\n        this._selectedMuted = value;\r\n    }\r\n\r\n    setHighlightedMuted(value) {\r\n        this._highlightedMuted = value;\r\n    }\r\n\r\n    _setSpecialStyle(color, opacity) {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", color)\r\n            .attr(\"fill-opacity\", opacity)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR);\r\n        this._line.attr(\"opacity\", \"1\");\r\n    }\r\n\r\n    _setMutedStyle() {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", \"url(#node-background-muted\")\r\n            .attr(\"fill-opacity\", \"1\")\r\n            .attr(\"stroke\", EDGES_STROKE_COLOR_MUTED);\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n\r\n    _setOriginalStyle() {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"fill-opacity\", \"1\")\r\n            .attr(\"stroke\", NODE_STROKE_COLOR);\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n}\r\n\r\nexport default DiagramNode;\r\n","import Component from './Component';\r\nimport DiagramNode from './DiagramNode';\r\nimport {NODE_GROUP_COLOR_DEFAULT} from './DiagramDefaults';\r\n\r\nclass DiagramNodes extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily,\r\n            mouseControl\r\n        }\r\n    ) {\r\n        super('diagram-nodes');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n        this._mouseControl = mouseControl;\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataNodes = data.nodes;\r\n        this._dataEdges = data.edges;\r\n        this._layout = data.layout;\r\n        this._groupColors = data.groupColors;\r\n        this._selected = data.selected;\r\n        this._subsequentNodes = data.subsequentNodes;\r\n\r\n        this._createNodes(data);\r\n        this._renderNodes();\r\n\r\n        data.nodes.forEach((node, index) => this._setNodeData(node, index));\r\n    }\r\n\r\n    _createNodes(data) {\r\n        this._nodes = data.nodes.map(() => {\r\n            return new DiagramNode({\r\n                nodeWidth: this._nodeWidth,\r\n                iconFontFamily: this._iconFontFamily\r\n            });\r\n        });\r\n    }\r\n\r\n    _renderNodes() {\r\n        this._nodes.forEach((node, index) => {\r\n            const name = this._dataNodes[index].name;\r\n            const styles = this._getStyles(this._layout.children[index]);\r\n            node.render(this.container.node(), styles.x, styles.y, index);\r\n            if (this._mouseControl) {\r\n                node\r\n                    .on(\"click\", (index) => {\r\n                        if (this._nodes[index].isSelected()) {\r\n                            this._observable.fire(\"deselectNode\", name);\r\n                        } else {\r\n                            this._observable.fire(\"selectNode\", name);\r\n                        }\r\n                    })\r\n                    .on(\"enter\", () => {\r\n                        this._enterTimeout = setTimeout(() => {\r\n                            this._observable.fire(\"highlightNode\", name);\r\n                        }, 150);\r\n                    })\r\n                    .on(\"leave\", () => {\r\n                        clearTimeout(this._enterTimeout);\r\n                        this._observable.fire(\"unhighlightNode\");\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    selectNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const selected = name === node.name;\r\n            const muted = !(selected || isSubsequentNode);\r\n\r\n            diagramNode.setSelected(selected);\r\n            diagramNode.setSelectedSubsequent(isSubsequentNode);\r\n            diagramNode.setSelectedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectNode() {\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n\r\n            diagramNode.setSelected(false);\r\n            diagramNode.setSelectedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n\r\n    }\r\n\r\n    highlightNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const highlighted = name === node.name;\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const muted = !(highlighted || isSubsequentNode);\r\n\r\n            diagramNode.setHighlighted(highlighted);\r\n            diagramNode.setHighlightedSubsequent(isSubsequentNode);\r\n            diagramNode.setHighlightedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightNode() {\r\n        this._nodes.forEach((diagramNode) => {\r\n            diagramNode.setHighlighted(false);\r\n            diagramNode.setHighlightedSubsequent(false);\r\n            diagramNode.setHighlightedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    _setNodeData(node, index) {\r\n        const styles = this._getStyles(this._layout.children[index]);\r\n        const groupColor = this._groupColors[node.group] || NODE_GROUP_COLOR_DEFAULT;\r\n        const selected = this._selected === node.name;\r\n        let selectedMuted, selectedSubsequent = false;\r\n\r\n        if (this._selected) {\r\n            const subsequentNodes = this._subsequentNodes[this._selected];\r\n            const isSubsequentNode = subsequentNodes && subsequentNodes.indexOf(node.name) >= 0;\r\n            selectedMuted = !isSubsequentNode;\r\n            selectedSubsequent = isSubsequentNode;\r\n        }\r\n\r\n        this._nodes[index].setData({\r\n            node,\r\n            selected,\r\n            selectedSubsequent,\r\n            selectedMuted,\r\n            styles,\r\n            groupColor\r\n        });\r\n    }\r\n\r\n    _getStyles(layout) {\r\n        return {\r\n            y: layout.y,\r\n            x: layout.x,\r\n            width: layout.width,\r\n            height: layout.height\r\n        };\r\n    }\r\n\r\n    isSomeSelected() {\r\n        return this._nodes.some(node => node.isSelected());\r\n    }\r\n\r\n    isSomeHighlighted() {\r\n        return this._nodes.some(node => node.isHighlighted());\r\n    }\r\n}\r\n\r\nexport default DiagramNodes;\r\n","import style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\nimport * as ELK from \"ELK\";\r\nimport Component from './Component';\r\nimport DiagramEdges from './DiagramEdges';\r\nimport DiagramNodes from './DiagramNodes';\r\nimport {\r\n    NODE_WIDTH,\r\n    NODE_HEIGHT,\r\n    MOUSE_CONTROL,\r\n    DIAGRAM_MARGIN\r\n} from './DiagramDefaults';\r\n\r\n/**\r\n * @class\r\n * Main Diagram class\r\n * @param {Object} options\r\n */\r\nclass Diagram extends Component {\r\n    constructor({\r\n        nodeWidth = NODE_WIDTH,\r\n        nodeHeight = NODE_HEIGHT,\r\n        groupColors = {},\r\n        elkWorkerUrl,\r\n        mouseControl = MOUSE_CONTROL,\r\n        iconFontFamily,\r\n        zoomable = true,\r\n        diagramMargin = DIAGRAM_MARGIN\r\n    }) {\r\n        super('diagram');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._nodeHeight = nodeHeight;\r\n        this._groupColors = groupColors;\r\n        this._elkWorkerUrl = elkWorkerUrl;\r\n        this._mouseControl = mouseControl;\r\n        this._iconFontFamily = iconFontFamily;\r\n        this._zoomable = zoomable;\r\n        this._diagramMargin = diagramMargin;\r\n\r\n        this._hasRenderedNodes = false;\r\n        this._currentScale = 1;\r\n        this._transitionDuration = 200;\r\n\r\n        this._elk = new ELK({\r\n            workerUrl: this._elkWorkerUrl\r\n        });\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\")\r\n            .add(\"zoom\");\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0) {\r\n        this._svgContainer = d3.select(selector).append(\"svg\");\r\n\r\n        return this._svgContainer.append(\"g\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataEdges = data.edges || [];\r\n        this._dataNodes = data.nodes || [];\r\n        this._data = data;\r\n\r\n        return this._renderElk();\r\n    }\r\n\r\n    _renderElk() {\r\n        const graph = this._getElkGraph();\r\n\r\n        return this._elk.layout(graph).then(layout => {\r\n            const subsequentNodes = this._getSubsequentNodes(this._data);\r\n\r\n            this._renderEdges(layout, subsequentNodes);\r\n            this._renderNodes(layout, subsequentNodes);\r\n\r\n            this._graphSize = this._getGraphSize(layout.children, layout.edges);\r\n\r\n            if (!this._zoomable) {\r\n                this._setGraphSize(this._graphSize);\r\n            } else {\r\n                this._doZoom();\r\n                this._moveGraph();\r\n            }\r\n\r\n            this._hasRenderedNodes = true;\r\n        });\r\n    }\r\n\r\n    _getElkGraph() {\r\n        return {\r\n            \"id\": \"root\",\r\n            properties: this._getRootProperties(),\r\n            \"children\": this._dataNodes.map(node => {\r\n                return {\r\n                    id: node.name,\r\n                    width: this._nodeWidth,\r\n                    height: this._nodeHeight\r\n                };\r\n            }),\r\n            \"edges\": this._dataEdges.map((edge, index) => {\r\n                return {\r\n                    id: \"edge_\" + index,\r\n                    sources: [edge.start],\r\n                    targets: [edge.end]\r\n                };\r\n            })\r\n        };\r\n    }\r\n\r\n    _getRootProperties(){\r\n        return {\r\n            'algorithm': 'layered',\r\n            'direction':'RIGHT'\r\n        };\r\n    }\r\n\r\n    _getSubsequentNodes(data) {\r\n        return data.nodes.reduce((obj, item) => {\r\n            const edges = this._findEdgesRecursive(data.edges, [item.name]);\r\n            obj[item.name] = edges.map(edge => edge.end);\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n    _findEdgesRecursive(edges, names, alreadySearched=[]) {\r\n        let results = names.reduce((acc, cur) => {\r\n            if (alreadySearched.indexOf(cur) >= 0) {\r\n                return acc;\r\n            }\r\n\r\n            const filteredEdges = edges.filter(edge => edge.start === cur);\r\n\r\n            return acc.concat(filteredEdges);\r\n        }, []);\r\n\r\n        const namesToFind = results.map(result => result.end);\r\n        alreadySearched = alreadySearched.concat(names);\r\n\r\n        if (namesToFind.length) {\r\n            return results.concat(this._findEdgesRecursive(this._dataEdges, namesToFind, alreadySearched));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    _getGraphSize(nodes, edges) {\r\n        const edgesWithBendPoints = edges.flatMap(edge => edge.sections.filter(section => section.bendPoints));\r\n        const bendPointsYs = edgesWithBendPoints.flatMap(edge => edge.bendPoints.flatMap(bendPoint => bendPoint.y));\r\n        const maxEdgesY = Math.max.apply(Math, bendPointsYs);\r\n        const maxNodesY = Math.max.apply(Math, nodes.map(node => node.y + node.height));\r\n\r\n        const height = Math.max(maxEdgesY, maxNodesY) + 10;\r\n        const width = Math.max.apply(Math, nodes.map(node => node.x + node.width)) + 10;\r\n\r\n        return {width, height};\r\n    }\r\n\r\n    _setGraphSize({width, height}) {\r\n        this._svgContainer.style(\"width\", `${width}px`);\r\n        this._svgContainer.style(\"height\", `${height}px`);\r\n    }\r\n\r\n    _moveGraph() {\r\n        const {x, y} = this._getTranslatePosition(1);\r\n        this._svgContainer.call(\r\n            this._zoom.transform,\r\n            d3.zoomIdentity.translate(x, y)\r\n        );\r\n    }\r\n\r\n    _getTranslatePosition(scale) {\r\n        const getOffset = (dimension, scale) => ((this._svgSize[dimension] - (this._graphSize[dimension] * scale)) / 2);\r\n        const offsetX = getOffset('width', scale);\r\n        const offsetY = getOffset('height', scale);\r\n\r\n        return {\r\n            x: Math.max(offsetX, this._diagramMargin),\r\n            y: Math.max(offsetY, this._diagramMargin)\r\n        };\r\n    }\r\n\r\n    _doZoom() {\r\n        this._svgSize = this._svgContainer.node().getBoundingClientRect();\r\n\r\n        this._svgContainer.classed(style.zoomable, true);\r\n\r\n        this._zoomOutScaleWidth = this._getZoomOutScale(this._graphSize.width, this._svgSize.width - (this._diagramMargin * 2));\r\n        this._zoomOutScaleHeight = this._getZoomOutScale(this._graphSize.height, this._svgSize.height - (this._diagramMargin * 2));\r\n\r\n        this._zoomOutScale = Math.min(this._zoomOutScaleWidth, this._zoomOutScaleHeight);\r\n\r\n        this._zoom = d3.zoom()\r\n            .extent([[0, 0], [this._svgSize.width, this._svgSize.height]])\r\n            .scaleExtent([this._zoomOutScale, 1]);\r\n\r\n        this._zoom.on(\"zoom\", this._zoomHandler.bind(this));\r\n        this._svgContainer.call(this._zoom);\r\n    }\r\n\r\n    _getZoomOutScale(size, max) {\r\n        if (size > max) {\r\n            return max / size;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    _zoomHandler() {\r\n        this._currentScale = d3.event.transform.k;\r\n        const {x, y, k} = d3.event.transform;\r\n        this._observable.fire(\"zoom\", {x, y, k});\r\n    }\r\n\r\n    _renderEdges(layout, subsequentNodes) {\r\n        const data = {\r\n            layout,\r\n            edges: this._dataEdges,\r\n            subsequentNodes,\r\n            selected: this._data.selected,\r\n        };\r\n        this._edges = new DiagramEdges();\r\n        this._edges.render(this.container.node());\r\n        this._edges.setData(data);\r\n    }\r\n\r\n    _renderNodes(layout, subsequentNodes) {\r\n        const data = {\r\n            nodes: this._data.nodes,\r\n            edges: this._data.edges,\r\n            selected: this._data.selected,\r\n            layout,\r\n            groupColors: this._groupColors,\r\n            subsequentNodes\r\n        };\r\n        this._nodes = new DiagramNodes({\r\n            nodeWidth: this._nodeWidth,\r\n            iconFontFamily: this._iconFontFamily,\r\n            mouseControl: this._mouseControl\r\n        });\r\n\r\n        this._nodes.render(this.container.node())\r\n            .on(\"selectNode\", (name) => {\r\n                this._observable.fire(\"selectNode\", name);\r\n            })\r\n            .on(\"deselectNode\", (name, highlightDeselected) => {\r\n                this._observable.fire(\"deselectNode\", name, highlightDeselected);\r\n            })\r\n            .on(\"highlightNode\", (name) => {\r\n                this._observable.fire(\"highlightNode\", name);\r\n            })\r\n            .on(\"unhighlightNode\", (name) => {\r\n                this._observable.fire(\"unhighlightNode\", name);\r\n            });\r\n\r\n        this._nodes.setData(data);\r\n    }\r\n\r\n    hasRenderedNodes() {\r\n        return this._hasRenderedNodes;\r\n    }\r\n\r\n    selectNode(name) {\r\n        this._nodes.selectNode(name);\r\n        this._edges.selectEdges(name);\r\n    }\r\n\r\n    deselectNode(name) {\r\n        const isSomeHighlighted = this._nodes.isSomeHighlighted();\r\n        this._nodes.deselectNode(name);\r\n        this._edges.deselectEdges(isSomeHighlighted);\r\n    }\r\n\r\n    highlightNode(name) {\r\n        this._nodes.highlightNode(name);\r\n        this._edges.highlightEdges(name);\r\n    }\r\n\r\n    unhighlightNode() {\r\n        const isSomeSelected = this._nodes.isSomeSelected();\r\n        this._nodes.unhighlightNode();\r\n        this._edges.unhighlightEdges(isSomeSelected);\r\n    }\r\n\r\n    setTransform(transform) {\r\n        this._container.attr(\"transform\", `translate(${transform.x}, ${transform.y}), scale(${transform.k})`);\r\n    }\r\n\r\n    setZoom(targetScale) {\r\n        if (!this._zoomable) {\r\n            return;\r\n        }\r\n        this._zoom.scaleTo(\r\n            this._svgContainer.transition().duration(this._transitionDuration),\r\n            targetScale\r\n        );\r\n    }\r\n\r\n    setFullExtent() {\r\n        if (!this._zoomable) {\r\n            return;\r\n        }\r\n\r\n        const {x, y, k} = this.getZoomFullExtentTransform();\r\n        this._svgContainer.transition().duration(this._transitionDuration).call(\r\n            this._zoom.transform,\r\n            d3.zoomIdentity.translate(x, y).scale(k)\r\n        );\r\n    }\r\n\r\n    getZoomFullExtentTransform() {\r\n        const {x, y} = this._getTranslatePosition(this._zoomOutScale);\r\n        return {\r\n            x, y, k: this._zoomOutScale\r\n        };\r\n    }\r\n\r\n    reloadZoom() {\r\n        if (!this._zoom) {\r\n            return;\r\n        }\r\n\r\n        this._zoom.on(\"zoom\", null);\r\n\r\n        const lastScale = this._currentScale;\r\n        this._doZoom();\r\n\r\n        if (lastScale < this._zoomOutScale) {\r\n            this.setFullExtent();\r\n        }\r\n    }\r\n\r\n    _clearData() {\r\n        if (this._zoom) {\r\n            this._zoom.on(\"zoom\", null);\r\n        }\r\n        this._dataEdges = null;\r\n        this._dataNodes = null;\r\n        this._edges = null;\r\n        this._nodes = null;\r\n        this._elk = null;\r\n    }\r\n}\r\n\r\nexport default Diagram;\r\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","Component","className","_container","_className","_observable","_svg","eventName","on","off","selector","x","y","d3","append","attr","style","destroy","_renderContainer","datum","fire","isRendered","clearData","remove","_clearData","_data","data","_setData","NODE_HEIGHT","DiagramEdge","container","selectAll","_selected","selected","_muted","muted","_renderEdge","markerEnd","strokeColor","_edge","d","layout","sections","path","startPoint","endPoint","lastPoint","bendPoints","forEach","bendPoint","nextPoint","params","_this2","_getSectionParams","section","_getSection","endSection","edge","type","defaultRadius","isEnd","curve","line","radius","diff","rounded","lastRounded","nextRounded","keys","abs","Math","key","lineEndCorrection","lastX","current","lastY","nextY","nextX","concat","point","round","value","DiagramEdges","_renderDefs","_createEdges","_renderEdges","_subsequentNodes","subsequentNodes","edges","_setEdgeData","_edges","map","render","_this3","node","start","isSubsequentNode","_isSubsequentNode","setData","id","color","name","diagramEdge","_this4","setSelected","setMuted","setStyle","isSomeHighlighted","_this5","_this6","highlighted","isSomeSelected","_this7","nodeName","edgeStart","DiagramNode","nodeWidth","iconFontFamily","_nodeWidth","_iconFontFamily","add","_node","_selectedMuted","selectedMuted","_selectedSubsequent","selectedSubsequent","_styles","styles","_groupColor","groupColor","_renderAll","_renderGradients","_renderNodeBaseLayer","_renderNodeSkeleton","icon","_renderIcon","_renderLine","_setNodeStyle","_rendertNodeName","_gradientEdge","_defs","_renderDefaultGradient","_renderMutedGradient","_defaultGradient","offset","opacity","enter","_mutedGradient","_nodeBaseLayer","width","height","_nodeSkeleton","_icon","NODE_GROUP_WIDTH","ICON_FONT_SIZE","text","_line","_setSpecialStyle","_highlighted","_highlightedSubsequent","_highlightedMuted","_setOriginalStyle","_setMutedStyle","_clipPath","_nodeNameMask","_nodeName","NODE_NAME_FONT_SIZE","DiagramNodes","mouseControl","_mouseControl","_dataNodes","nodes","_dataEdges","_layout","_groupColors","groupColors","_createNodes","_renderNodes","_setNodeData","_nodes","_getStyles","children","isSelected","_enterTimeout","setTimeout","diagramNode","setSelectedSubsequent","setSelectedMuted","setHighlighted","setHighlightedSubsequent","setHighlightedMuted","group","some","isHighlighted","nodeHeight","elkWorkerUrl","zoomable","diagramMargin","_nodeHeight","_elkWorkerUrl","_zoomable","_diagramMargin","_hasRenderedNodes","_currentScale","_transitionDuration","_elk","ELK","_this","_svgContainer","_renderElk","graph","_getElkGraph","then","_getSubsequentNodes","_graphSize","_getGraphSize","_doZoom","_moveGraph","_setGraphSize","_getRootProperties","end","obj","item","_findEdgesRecursive","names","alreadySearched","results","filteredEdges","filter","namesToFind","result","edgesWithBendPoints","flatMap","bendPointsYs","maxEdgesY","max","maxNodesY","_getTranslatePosition","call","_zoom","transform","translate","scale","getOffset","dimension","_svgSize","offsetX","offsetY","getBoundingClientRect","classed","_zoomOutScaleWidth","_getZoomOutScale","_zoomOutScaleHeight","_zoomOutScale","min","extent","scaleExtent","_zoomHandler","bind","size","k","highlightDeselected","selectNode","selectEdges","deselectNode","deselectEdges","highlightNode","highlightEdges","unhighlightNode","unhighlightEdges","targetScale","scaleTo","transition","duration","getZoomFullExtentTransform","lastScale","setFullExtent"],"mappings":"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"}