{"version":3,"file":"clever-diagram-1.1.5.min.js","sources":["../src/utils/Observable.js","../src/Component.js","../src/DiagramDefaults.js","../src/DiagramEdge.js","../src/DiagramEdges.js","../src/DiagramNode.js","../src/DiagramNodes.js","../src/Diagram.js"],"sourcesContent":["/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Bind event\r\n     * @param {String} event event name\r\n     * @param {Function} handler event handler\r\n     */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        this._handlers[event].push(handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Unbind event\r\n     * @param {String} event event name\r\n     * @param {Function} [handler] event handler, optional\r\n     */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        if (!handler) {\r\n            this._handlers[event] = [];\r\n        } else {\r\n            var handlers = this._handlers[event];\r\n            var index = handlers.indexOf(handler);\r\n            if (index != -1){\r\n                handlers.splice(index, 1);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Add new event to be handled\r\n     * @param {String} event\r\n     */\r\n    add(event) {\r\n        if (!(event in this._handlers)) {\r\n            this._handlers[event] = [];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Fire widget event\r\n     * @param {String} event event name\r\n     * @param {*} ...args event arguments\r\n     */\r\n    fire(event, ...args) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n        var handlers = this._handlers[event];\r\n        for (var i = 0; i < handlers.length; i++) {\r\n            handlers[i].apply(this, args);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * Destroys this observable, removes events and so on\r\n     */\r\n    destroy() {\r\n        this._handlers = null;\r\n        return this;\r\n    }\r\n\r\n}","import Observable from \"./utils/Observable\";\r\nimport style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nclass Component {\r\n\r\n    constructor(\r\n        className = \"component\"\r\n    ) {\r\n        this._container = null;\r\n        this._className = className;\r\n\r\n        this._observable = new Observable([\r\n            \"enter\",\r\n            \"leave\",\r\n            \"click\"\r\n        ]);\r\n\r\n        this._svg = null;\r\n    }\r\n\r\n    on(eventName, handler) {\r\n        this._observable.on(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    off(eventName, handler) {\r\n        this._observable.off(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    get className() {\r\n        return this._className;\r\n    }\r\n\r\n    get container() {\r\n        return this._container;\r\n    }\r\n\r\n    get observable() {\r\n        return this._observable;\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0){\r\n\r\n        return d3.select(selector).append(\"g\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n\r\n    }\r\n\r\n    render(selector, x = 0, y = 0, index = 0){\r\n        this.destroy();\r\n\r\n        this._container = this._renderContainer(selector, x, y);\r\n\r\n        if (!this._container) {\r\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\r\n        }\r\n\r\n        this._container.datum(index);\r\n\r\n        this._container\r\n            .on(\"click\", (index) => {\r\n                this._observable.fire(\"click\", index);\r\n            })\r\n            .on(\"mouseenter\", (index) => {\r\n                this._observable.fire(\"enter\", index);\r\n            })\r\n            .on(\"mouseleave\", (index) => {\r\n                this._observable.fire(\"leave\", index);\r\n            });\r\n\r\n        return this;\r\n    }\r\n\r\n    destroy(){\r\n        if (this.isRendered()) {\r\n            this.clearData();\r\n            this._container.datum(null);\r\n            this._container.remove();\r\n            this._container = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearData() {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call clearData() when widget is not rendered, please call .render() first.\";\r\n        }\r\n        this._clearData();\r\n        this._data = null;\r\n        return this;\r\n    }\r\n\r\n    isRendered(){\r\n        return this._container !== null;\r\n    }\r\n\r\n    setData(data) {\r\n        if (!this.isRendered()) {\r\n            throw \"Can't call setData() when component is not rendered, please call .render() first.\";\r\n        }\r\n\r\n        return this._setData(this._container, data);\r\n    }\r\n}\r\n\r\nexport default Component;\r\n","\r\nexport const DIAGRAM_MARGIN = 50;\r\nexport const NODE_WIDTH = 190;\r\nexport const NODE_HEIGHT = 40;\r\nexport const NODE_GROUP_WIDTH = 40;\r\n\r\nexport const MOUSE_CONTROL = true;\r\n\r\nexport const ICON_FONT_SIZE = 18;\r\nexport const NODE_NAME_FONT_SIZE = 13;\r\n\r\nexport const NODE_ICON_COLOR = '#4a4a4a';\r\nexport const NODE_NAME_COLOR = '#4a4a4a';\r\nexport const NODE_DEFAULT_BG = 'rgba(255,255,255,1)';\r\nexport const NODE_SELECTED_BG = '#fff300';\r\nexport const NODE_MUTED_BG = '#f0f0f0';\r\nexport const NODE_GROUP_COLOR_DEFAULT = '#2196F3';\r\nexport const NODE_GROUP_COLOR_MUTED = '#d5d5d5';\r\nexport const NODE_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR_MUTED = '#bababa';\r\n","import Component from './Component';\r\nimport {\r\n    EDGES_STROKE_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdge extends Component {\r\n    constructor() {\r\n        super('diagram-edge');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._selected = data.selected;\r\n        this._muted = data.muted;\r\n\r\n        this._renderEdge(data);\r\n    }\r\n\r\n    _renderEdge(data) {\r\n        const markerEnd = this._muted ? `url(#end-muted)` : `url(#end)`;\r\n        const strokeColor = this._muted ? EDGES_STROKE_COLOR_MUTED : EDGES_STROKE_COLOR;\r\n\r\n        this._edge = this.container.append(\"path\")\r\n            .attr(\"class\", \"link\")\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke-linejoin\", \"bevel\")\r\n            .attr(\"fill\", \"transparent\")\r\n            .attr(\"d\", () => {\r\n                const d = data.layout.sections[0];\r\n                let path = \"\";\r\n                if (d.startPoint && d.endPoint) {\r\n                    path += `M${d.startPoint.x} ${d.startPoint.y} `;\r\n\r\n                    const defaultRadius = 6;\r\n                    let lastPoint = {\r\n                        x: d.startPoint.x,\r\n                        y: d.startPoint.y\r\n                    };\r\n\r\n                    (d.bendPoints || []).forEach((bendPoint, index) => {\r\n\r\n                        const nextPoint = d.bendPoints[index + 1] || d.endPoint;\r\n\r\n                        const params = this._getSectionParams(\r\n                            bendPoint,\r\n                            lastPoint,\r\n                            nextPoint,\r\n                            defaultRadius\r\n                        );\r\n\r\n                        const section = this._getSection(params);\r\n\r\n                        path += section;\r\n\r\n                        lastPoint.x = bendPoint.x;\r\n                        lastPoint.y = bendPoint.y;\r\n\r\n                    }, this);\r\n\r\n                    const isEnd = true;\r\n                    const nextPoint = {};\r\n                    const params = this._getSectionParams(\r\n                        d.endPoint,\r\n                        lastPoint,\r\n                        nextPoint,\r\n                        defaultRadius,\r\n                        isEnd\r\n                    );\r\n\r\n                    const endSection = this._getSection(params);\r\n\r\n                    path += endSection;\r\n                }\r\n\r\n                return path;\r\n            });\r\n\r\n        if (data.edge.type == \"arrow\") {\r\n            this._edge.attr(\"marker-end\", markerEnd);\r\n        }\r\n    }\r\n\r\n    _getSection(params) {\r\n        const {x, y, defaultRadius, isEnd} = params;\r\n\r\n        let curve = '';\r\n        let line = '';\r\n        let radius = defaultRadius;\r\n\r\n        const diff = {\r\n            lastX: x.rounded - x.lastRounded,\r\n            lastY: y.rounded - y.lastRounded,\r\n            nextX: x.nextRounded - x.rounded,\r\n            nextY: y.nextRounded - y.rounded\r\n        };\r\n\r\n        Object.keys(diff).forEach(key => {\r\n            const abs = Math.abs(diff[key]);\r\n            if (abs && abs < radius) {\r\n                radius = abs / 2;\r\n            }\r\n        });\r\n\r\n        const lineEndCorrection = isEnd ? 0 : radius;\r\n\r\n        // DRAW LINE\r\n        if (diff.lastX > 0) {\r\n            // to right\r\n            line = `L ${x.current - lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastX < 0) {\r\n            // to left\r\n            line = `L ${x.current + lineEndCorrection} ${y.current} `;\r\n        } else if (diff.lastY > 0) {\r\n            // to bottom\r\n            line = `L ${x.current} ${y.current - lineEndCorrection} `;\r\n        } else if (diff.lastY < 0) {\r\n            // to top\r\n            line = `L ${x.current} ${y.current + lineEndCorrection} `;\r\n        }\r\n\r\n        // DRAW CURVE\r\n        if (!isEnd) {\r\n            if (diff.nextY > 0) {\r\n                // to bottom\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current + radius} `;\r\n            } else if (diff.nextY < 0) {\r\n                // to top\r\n                curve = `Q ${x.current} ${y.current} ${x.current} ${y.current - radius} `;\r\n            } else if (diff.nextX < 0) {\r\n                // to left\r\n                curve = `Q ${x.current} ${y.current} ${x.current - radius} ${y.current} `;\r\n            } else if (diff.nextX > 0) {\r\n                // to right\r\n                curve = `Q ${x.current} ${y.current} ${x.current + radius} ${y.current} `;\r\n            }\r\n        }\r\n\r\n        return line.concat(curve);\r\n    }\r\n\r\n    _getSectionParams(\r\n        point,\r\n        lastPoint,\r\n        nextPoint,\r\n        defaultRadius,\r\n        isEnd = false\r\n    ) {\r\n        return {\r\n            x: {\r\n                current: point.x,\r\n                last: lastPoint.x,\r\n                next: nextPoint.x,\r\n                rounded: Math.round(point.x),\r\n                lastRounded: Math.round(lastPoint.x),\r\n                nextRounded: Math.round(nextPoint.x)\r\n            },\r\n            y: {\r\n                current: point.y,\r\n                last: lastPoint.y,\r\n                next: nextPoint.y,\r\n                rounded: Math.round(point.y),\r\n                lastRounded: Math.round(lastPoint.y),\r\n                nextRounded: Math.round(nextPoint.y)\r\n            },\r\n            defaultRadius,\r\n            isEnd\r\n        };\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setMuted(value) {\r\n        this._muted = value;\r\n    }\r\n\r\n    setStyle() {\r\n        if (this._muted) {\r\n            this._edge.attr('stroke', EDGES_STROKE_COLOR_MUTED);\r\n            this._edge.attr(\"marker-end\", \"url(#end-muted)\");\r\n        } else {\r\n            this._edge.attr('stroke', EDGES_STROKE_COLOR);\r\n            this._edge.attr(\"marker-end\", \"url(#end)\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default DiagramEdge;\r\n","import Component from './Component';\r\nimport DiagramEdge from './DiagramEdge';\r\nimport {\r\n    EDGES_STROKE_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdges extends Component {\r\n    constructor() {\r\n        super('diagram-edges');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._renderDefs('end', EDGES_STROKE_COLOR);\r\n        this._renderDefs('end-muted', EDGES_STROKE_COLOR_MUTED);\r\n\r\n        this._createEdges(data);\r\n        this._renderEdges();\r\n\r\n        this._data = data;\r\n        this._subsequentNodes = data.subsequentNodes;\r\n        this._selected = data.selected;\r\n\r\n        data.edges.forEach((edge, index) => this._setEdgeData(edge, index));\r\n    }\r\n\r\n    _createEdges(data) {\r\n        this._edges = data.edges.map(() => {\r\n            return new DiagramEdge();\r\n        });\r\n    }\r\n\r\n    _renderEdges() {\r\n        this._edges.forEach((edge, index) => {\r\n            edge.render(this.container.node(), 0, 0, index);\r\n        });\r\n    }\r\n\r\n    _setEdgeData(edge, index) {\r\n        const layout = this._data.layout.edges[index];\r\n\r\n\r\n        const selected = this._selected === edge.start;\r\n        let isSubsequentNode = false;\r\n\r\n        if (this._selected) {\r\n            isSubsequentNode = this._isSubsequentNode(this._selected, edge.start);\r\n        }\r\n\r\n        const muted = this._selected && !(selected || isSubsequentNode);\r\n\r\n        this._edges[index].setData({\r\n            edge,\r\n            layout,\r\n            selected,\r\n            muted\r\n        });\r\n    }\r\n\r\n    _renderDefs(id, color) {\r\n        this.container.append(\"svg:defs\")\r\n            .append(\"svg:marker\")\r\n            .attr(\"id\", id)\r\n            .attr(\"viewBox\", \"0 -5 10 10\")\r\n            .attr(\"refX\", 10)\r\n            .attr(\"refY\", 0)\r\n            .attr(\"markerWidth\", 5)\r\n            .attr(\"markerHeight\", 5)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"fill\", color)\r\n            .style(\"stroke-opacity\", 0.6)\r\n            .append(\"svg:path\")\r\n            .attr(\"d\", \"M0,-5L10,0L0,5\");\r\n    }\r\n\r\n    selectEdges(name) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const isSubsequentNode = this._isSubsequentNode(name, edge.start);\r\n            const selected = (name === edge.start) || isSubsequentNode;\r\n\r\n            diagramEdge.setSelected(selected);\r\n            diagramEdge.setMuted(!selected);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectEdges(isSomeHighlighted) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const muted = isSomeHighlighted && diagramEdge._muted;\r\n\r\n            diagramEdge.setMuted(muted);\r\n            diagramEdge.setSelected(false);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    highlightEdges(name) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const isSubsequentNode = this._isSubsequentNode(name, edge.start);\r\n            const highlighted = (name === edge.start) || isSubsequentNode;\r\n\r\n            diagramEdge.setMuted(!highlighted);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightEdges(isSomeSelected) {\r\n        this._data.edges.forEach((edge, index) => {\r\n            const diagramEdge = this._edges[index];\r\n            const muted = isSomeSelected && !diagramEdge._selected;\r\n\r\n            diagramEdge.setMuted(muted);\r\n            diagramEdge.setStyle();\r\n        });\r\n    }\r\n\r\n    _isSubsequentNode(nodeName, edgeStart) {\r\n        const subsequentNodes = this._subsequentNodes[nodeName];\r\n        return subsequentNodes.indexOf(edgeStart) >= 0;\r\n    }\r\n}\r\n\r\nexport default DiagramEdges;\r\n","import style from \"./CleverDiagram.css\";\r\nimport Component from './Component';\r\nimport {\r\n    NODE_HEIGHT,\r\n    ICON_FONT_SIZE,\r\n    NODE_SELECTED_BG,\r\n    NODE_DEFAULT_BG,\r\n    NODE_MUTED_BG,\r\n    NODE_GROUP_COLOR_MUTED,\r\n    NODE_GROUP_WIDTH,\r\n    NODE_STROKE_COLOR,\r\n    NODE_NAME_FONT_SIZE,\r\n    NODE_ICON_COLOR,\r\n    NODE_NAME_COLOR,\r\n    EDGES_STROKE_COLOR_MUTED\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramNode extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily\r\n        }\r\n    ) {\r\n        super('diagram-node');\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._observable\r\n            .add(\"enterNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._node = data.node;\r\n        this._selected = data.selected;\r\n        this._selectedMuted = data.selectedMuted;\r\n        this._selectedSubsequent = data.selectedSubsequent;\r\n        this._styles = data.styles;\r\n        this._groupColor = data.groupColor;\r\n\r\n        this._renderAll();\r\n    }\r\n\r\n    _renderAll() {\r\n        this._renderGradients();\r\n        this._renderNodeBaseLayer();\r\n        this._renderNodeSkeleton();\r\n\r\n        if (this._node.icon) {\r\n            this._renderIcon();\r\n        }\r\n\r\n        this._renderLine();\r\n        this._setNodeStyle();\r\n        this._rendertNodeName();\r\n    }\r\n\r\n    _renderGradients() {\r\n        this._gradientEdge = NODE_GROUP_WIDTH/this._nodeWidth;\r\n\r\n        this._defs = this.container.append(\"svg:defs\");\r\n\r\n        this._renderDefaultGradient();\r\n        this._renderMutedGradient();\r\n    }\r\n\r\n    _renderDefaultGradient() {\r\n        const colorDefaultBg = NODE_DEFAULT_BG;\r\n\r\n        this._defaultGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", `node-background-default-${this._node.name}`);\r\n\r\n        this._defaultGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge, color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge + 0.001, color: colorDefaultBg, opacity: '1'},\r\n                { offset: \"1\", color: colorDefaultBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderMutedGradient() {\r\n        const colorMutedBg = NODE_MUTED_BG;\r\n        const colorGroupMuted= NODE_GROUP_COLOR_MUTED;\r\n\r\n        this._mutedGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", \"node-background-muted\");\r\n\r\n        this._mutedGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge, color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge + 0.001, color: colorMutedBg, opacity: '1'},\r\n                { offset: \"1\", color: colorMutedBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", data => data.offset)\r\n            .attr(\"stop-color\", data => data.color)\r\n            .attr(\"stop-opacity\", data => data.opacity);\r\n    }\r\n\r\n    _renderNodeBaseLayer() {\r\n        this._nodeBaseLayer = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"rx\", 5);\r\n    }\r\n\r\n    _renderNodeSkeleton() {\r\n        this._nodeSkeleton = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"rx\", 5)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"class\", style['node-skeleton'])\r\n            .attr(\"id\", this._node.name);\r\n    }\r\n\r\n    _renderIcon() {\r\n        this._icon = this.container.append(\"text\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH/2)\r\n            .attr(\"y\", (this._styles.height/2 + ICON_FONT_SIZE/2) - 1)\r\n            .attr(\"class\", style['node-icon'])\r\n            .attr(\"font-family\", this._iconFontFamily)\r\n            .attr(\"font-size\", ICON_FONT_SIZE)\r\n            .attr(\"fill\", NODE_ICON_COLOR)\r\n            .text(this._node.icon);\r\n    }\r\n\r\n    _renderLine() {\r\n        this._line = this.container\r\n            .append(\"line\")\r\n            .attr(\"x1\", NODE_GROUP_WIDTH)\r\n            .attr(\"y1\", 0)\r\n            .attr(\"x2\", NODE_GROUP_WIDTH)\r\n            .attr(\"y2\", NODE_GROUP_WIDTH)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"opacity\", 0);\r\n    }\r\n\r\n    _setNodeStyle() {\r\n        if (this._selected) {\r\n            this._setSpecialStyle(NODE_SELECTED_BG, 1);\r\n        } else if (this._highlighted) {\r\n            this._setSpecialStyle(this._groupColor, 0.4);\r\n        } else if (!this._highlightedSubsequent && (this._selectedMuted || this._highlightedMuted)) {\r\n            this._setMutedStyle();\r\n        } else {\r\n            this._setOriginalStyle();\r\n        }\r\n    }\r\n\r\n    _rendertNodeName() {\r\n        this._clipPath = this._defs\r\n            .append(\"clipPath\")\r\n            .attr(\"id\", \"node-name-mask\");\r\n\r\n        this._nodeNameMask = this._clipPath\r\n            .append(\"rect\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._nodeWidth - NODE_GROUP_WIDTH - 25)\r\n            .attr(\"height\", this._styles.height);\r\n\r\n        this._nodeName = this.container\r\n            .append(\"g\")\r\n            .attr(\"clip-path\", \"url(#node-name-mask)\")\r\n            .append(\"text\")\r\n            .text(this._node.name)\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", (NODE_HEIGHT/2 + NODE_NAME_FONT_SIZE/2) - 2)\r\n            .attr(\"font-size\", NODE_NAME_FONT_SIZE)\r\n            .attr(\"fill\", NODE_NAME_COLOR)\r\n            .attr(\"class\", style[\"node-name\"]);\r\n    }\r\n\r\n    setStyle() {\r\n        this._setNodeStyle();\r\n    }\r\n\r\n    isSelected() {\r\n        return this._selected;\r\n    }\r\n\r\n    isSelectedSubsequent() {\r\n        return this._selectedSubsequent;\r\n    }\r\n\r\n    isHighlighted() {\r\n        return this._highlighted;\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setSelectedSubsequent(value) {\r\n        this._selectedSubsequent = value;\r\n    }\r\n\r\n    setHighlighted(value) {\r\n        this._highlighted = value;\r\n    }\r\n\r\n    setHighlightedSubsequent(value) {\r\n        this._highlightedSubsequent = value;\r\n    }\r\n\r\n    setSelectedMuted(value) {\r\n        this._selectedMuted = value;\r\n    }\r\n\r\n    setHighlightedMuted(value) {\r\n        this._highlightedMuted = value;\r\n    }\r\n\r\n    _setSpecialStyle(color, opacity) {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", color)\r\n            .attr(\"fill-opacity\", opacity)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR);\r\n        this._line.attr(\"opacity\", \"1\");\r\n    }\r\n\r\n    _setMutedStyle() {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", \"url(#node-background-muted\")\r\n            .attr(\"fill-opacity\", \"1\")\r\n            .attr(\"stroke\", EDGES_STROKE_COLOR_MUTED);\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n\r\n    _setOriginalStyle() {\r\n        this._nodeSkeleton\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"fill-opacity\", \"1\")\r\n            .attr(\"stroke\", NODE_STROKE_COLOR);\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n\r\n    get styles() {\r\n        return this._styles;\r\n    }\r\n\r\n    get name() {\r\n        return this._node.name;\r\n    }\r\n}\r\n\r\nexport default DiagramNode;\r\n","import Component from './Component';\r\nimport DiagramNode from './DiagramNode';\r\nimport {NODE_GROUP_COLOR_DEFAULT} from './DiagramDefaults';\r\n\r\nclass DiagramNodes extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily,\r\n            mouseControl\r\n        }\r\n    ) {\r\n        super('diagram-nodes');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n        this._mouseControl = mouseControl;\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataNodes = data.nodes;\r\n        this._dataEdges = data.edges;\r\n        this._layout = data.layout;\r\n        this._groupColors = data.groupColors;\r\n        this._selected = data.selected;\r\n        this._subsequentNodes = data.subsequentNodes;\r\n\r\n        this._createNodes(data);\r\n        this._renderNodes();\r\n\r\n        data.nodes.forEach((node, index) => this._setNodeData(node, index));\r\n    }\r\n\r\n    _createNodes(data) {\r\n        this._nodes = data.nodes.map(() => {\r\n            return new DiagramNode({\r\n                nodeWidth: this._nodeWidth,\r\n                iconFontFamily: this._iconFontFamily\r\n            });\r\n        });\r\n    }\r\n\r\n    _renderNodes() {\r\n        this._nodes.forEach((node, index) => {\r\n            const name = this._dataNodes[index].name;\r\n            const styles = this._getStyles(this._layout.children[index]);\r\n            node.render(this.container.node(), styles.x, styles.y, index);\r\n            if (this._mouseControl) {\r\n                node\r\n                    .on(\"click\", (index) => {\r\n                        if (this._nodes[index].isSelected()) {\r\n                            this._observable.fire(\"deselectNode\", name);\r\n                        } else {\r\n                            this._observable.fire(\"selectNode\", name);\r\n                        }\r\n                    })\r\n                    .on(\"enter\", () => {\r\n                        this._enterTimeout = setTimeout(() => {\r\n                            this._observable.fire(\"highlightNode\", name);\r\n                        }, 150);\r\n                    })\r\n                    .on(\"leave\", () => {\r\n                        clearTimeout(this._enterTimeout);\r\n                        this._observable.fire(\"unhighlightNode\");\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    selectNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const selected = name === node.name;\r\n            const muted = !(selected || isSubsequentNode);\r\n\r\n            diagramNode.setSelected(selected);\r\n            diagramNode.setSelectedSubsequent(isSubsequentNode);\r\n            diagramNode.setSelectedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectNode() {\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n\r\n            diagramNode.setSelected(false);\r\n            diagramNode.setSelectedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n\r\n    }\r\n\r\n    highlightNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const highlighted = name === node.name;\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const muted = !(highlighted || isSubsequentNode);\r\n\r\n            diagramNode.setHighlighted(highlighted);\r\n            diagramNode.setHighlightedSubsequent(isSubsequentNode);\r\n            diagramNode.setHighlightedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightNode() {\r\n        this._nodes.forEach((diagramNode) => {\r\n            diagramNode.setHighlighted(false);\r\n            diagramNode.setHighlightedSubsequent(false);\r\n            diagramNode.setHighlightedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    _setNodeData(node, index) {\r\n        const styles = this._getStyles(this._layout.children[index]);\r\n        const groupColor = this._groupColors[node.group] || NODE_GROUP_COLOR_DEFAULT;\r\n        const selected = this._selected === node.name;\r\n        let selectedMuted, selectedSubsequent = false;\r\n\r\n        if (this._selected) {\r\n            const subsequentNodes = this._subsequentNodes[this._selected];\r\n            const isSubsequentNode = subsequentNodes && subsequentNodes.indexOf(node.name) >= 0;\r\n            selectedMuted = !isSubsequentNode;\r\n            selectedSubsequent = isSubsequentNode;\r\n        }\r\n\r\n        this._nodes[index].setData({\r\n            node,\r\n            selected,\r\n            selectedSubsequent,\r\n            selectedMuted,\r\n            styles,\r\n            groupColor\r\n        });\r\n    }\r\n\r\n    _getStyles(layout) {\r\n        return {\r\n            y: layout.y,\r\n            x: layout.x,\r\n            width: layout.width,\r\n            height: layout.height\r\n        };\r\n    }\r\n\r\n    isSomeSelected() {\r\n        return this._nodes.some(node => node.isSelected());\r\n    }\r\n\r\n    isSomeHighlighted() {\r\n        return this._nodes.some(node => node.isHighlighted());\r\n    }\r\n\r\n    getNodeByName(name) {\r\n        return this._nodes.find(node => node.name === name);\r\n    }\r\n}\r\n\r\nexport default DiagramNodes;\r\n","import style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\nimport * as ELK from \"ELK\";\r\nimport Component from './Component';\r\nimport DiagramEdges from './DiagramEdges';\r\nimport DiagramNodes from './DiagramNodes';\r\nimport {\r\n    NODE_WIDTH,\r\n    NODE_HEIGHT,\r\n    MOUSE_CONTROL,\r\n    DIAGRAM_MARGIN\r\n} from './DiagramDefaults';\r\n\r\n/**\r\n * @class\r\n * Main Diagram class\r\n * @param {Object} options\r\n */\r\nclass Diagram extends Component {\r\n    constructor({\r\n        nodeWidth = NODE_WIDTH,\r\n        nodeHeight = NODE_HEIGHT,\r\n        groupColors = {},\r\n        elkWorkerUrl,\r\n        mouseControl = MOUSE_CONTROL,\r\n        iconFontFamily,\r\n        zoomable = true,\r\n        diagramMargin = DIAGRAM_MARGIN\r\n    }) {\r\n        super('diagram');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._nodeHeight = nodeHeight;\r\n        this._groupColors = groupColors;\r\n        this._elkWorkerUrl = elkWorkerUrl;\r\n        this._mouseControl = mouseControl;\r\n        this._iconFontFamily = iconFontFamily;\r\n        this._zoomable = zoomable;\r\n        this._diagramMargin = diagramMargin;\r\n\r\n        this._hasRenderedNodes = false;\r\n        this._currentScale = 1;\r\n        this._transitionDuration = 200;\r\n\r\n        this._elk = new ELK({\r\n            workerUrl: this._elkWorkerUrl\r\n        });\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\")\r\n            .add(\"zoom\");\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0) {\r\n        this._svgContainer = d3.select(selector).append(\"svg\");\r\n\r\n        return this._svgContainer.append(\"g\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataEdges = data.edges || [];\r\n        this._dataNodes = data.nodes || [];\r\n        this._data = data;\r\n\r\n        return this._renderElk();\r\n    }\r\n\r\n    _renderElk() {\r\n        const graph = this._getElkGraph();\r\n\r\n        return this._elk.layout(graph).then(layout => {\r\n            const subsequentNodes = this._getSubsequentNodes(this._data);\r\n\r\n            this._renderEdges(layout, subsequentNodes);\r\n            this._renderNodes(layout, subsequentNodes);\r\n\r\n            this._graphSize = this._getGraphSize(layout.children, layout.edges);\r\n\r\n            if (!this._zoomable) {\r\n                this._setGraphSize(this._graphSize);\r\n            } else {\r\n                this._doZoom();\r\n                this._moveGraph();\r\n            }\r\n\r\n            this._hasRenderedNodes = true;\r\n        });\r\n    }\r\n\r\n    _getElkGraph() {\r\n        return {\r\n            \"id\": \"root\",\r\n            properties: this._getRootProperties(),\r\n            \"children\": this._dataNodes.map(node => {\r\n                return {\r\n                    id: node.name,\r\n                    width: this._nodeWidth,\r\n                    height: this._nodeHeight\r\n                };\r\n            }),\r\n            \"edges\": this._dataEdges.map((edge, index) => {\r\n                return {\r\n                    id: \"edge_\" + index,\r\n                    sources: [edge.start],\r\n                    targets: [edge.end]\r\n                };\r\n            })\r\n        };\r\n    }\r\n\r\n    _getRootProperties(){\r\n        return {\r\n            'algorithm': 'layered',\r\n            'direction':'RIGHT'\r\n        };\r\n    }\r\n\r\n    _getSubsequentNodes(data) {\r\n        return data.nodes.reduce((obj, item) => {\r\n            const edges = this._findEdgesRecursive(data.edges, [item.name]);\r\n            obj[item.name] = edges.map(edge => edge.end);\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n    _findEdgesRecursive(edges, names, alreadySearched=[]) {\r\n        let results = names.reduce((acc, cur) => {\r\n            if (alreadySearched.indexOf(cur) >= 0) {\r\n                return acc;\r\n            }\r\n\r\n            const filteredEdges = edges.filter(edge => edge.start === cur);\r\n\r\n            return acc.concat(filteredEdges);\r\n        }, []);\r\n\r\n        const namesToFind = results.map(result => result.end);\r\n        alreadySearched = alreadySearched.concat(names);\r\n\r\n        if (namesToFind.length) {\r\n            return results.concat(this._findEdgesRecursive(this._dataEdges, namesToFind, alreadySearched));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    _getGraphSize(nodes, edges) {\r\n        const edgesWithBendPoints = edges.flatMap(edge => edge.sections.filter(section => section.bendPoints));\r\n        const bendPointsYs = edgesWithBendPoints.flatMap(edge => edge.bendPoints.flatMap(bendPoint => bendPoint.y));\r\n        const maxEdgesY = Math.max.apply(Math, bendPointsYs);\r\n        const maxNodesY = Math.max.apply(Math, nodes.map(node => node.y + node.height));\r\n\r\n        const height = Math.max(maxEdgesY, maxNodesY) + 10;\r\n        const width = Math.max.apply(Math, nodes.map(node => node.x + node.width)) + 10;\r\n\r\n        return {width, height};\r\n    }\r\n\r\n    _setGraphSize({width, height}) {\r\n        this._svgContainer.style(\"width\", `${width}px`);\r\n        this._svgContainer.style(\"height\", `${height}px`);\r\n    }\r\n\r\n    _moveGraph() {\r\n        const {x, y} = this._getTranslatePosition(1);\r\n        this._svgContainer.call(\r\n            this._zoom.transform,\r\n            d3.zoomIdentity.translate(x, y)\r\n        );\r\n    }\r\n\r\n    _getTranslatePosition(scale) {\r\n        const getOffset = (dimension, scale) => ((this._svgSize[dimension] - (this._graphSize[dimension] * scale)) / 2);\r\n        const offsetX = getOffset('width', scale);\r\n        const offsetY = getOffset('height', scale);\r\n\r\n        return {\r\n            x: Math.max(offsetX, this._diagramMargin),\r\n            y: Math.max(offsetY, this._diagramMargin)\r\n        };\r\n    }\r\n\r\n    _doZoom() {\r\n        this._svgSize = this._svgContainer.node().getBoundingClientRect();\r\n\r\n        this._svgContainer.classed(style.zoomable, true);\r\n\r\n        this._zoomOutScaleWidth = this._getZoomOutScale(this._graphSize.width, this._svgSize.width - (this._diagramMargin * 2));\r\n        this._zoomOutScaleHeight = this._getZoomOutScale(this._graphSize.height, this._svgSize.height - (this._diagramMargin * 2));\r\n\r\n        this._zoomOutScale = Math.min(this._zoomOutScaleWidth, this._zoomOutScaleHeight);\r\n\r\n        this._zoom = d3.zoom()\r\n            .extent([[0, 0], [this._svgSize.width, this._svgSize.height]])\r\n            .scaleExtent([this._zoomOutScale, 1]);\r\n\r\n        this._zoom.on(\"zoom\", this._zoomHandler.bind(this));\r\n        this._svgContainer.call(this._zoom);\r\n    }\r\n\r\n    _getZoomOutScale(size, max) {\r\n        if (size > max) {\r\n            return max / size;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    _zoomHandler() {\r\n        this._currentScale = d3.event.transform.k;\r\n        const {x, y, k} = d3.event.transform;\r\n        this._observable.fire(\"zoom\", {x, y, k});\r\n    }\r\n\r\n    _renderEdges(layout, subsequentNodes) {\r\n        const data = {\r\n            layout,\r\n            edges: this._dataEdges,\r\n            subsequentNodes,\r\n            selected: this._data.selected,\r\n        };\r\n        this._edges = new DiagramEdges();\r\n        this._edges.render(this.container.node());\r\n        this._edges.setData(data);\r\n    }\r\n\r\n    _renderNodes(layout, subsequentNodes) {\r\n        const data = {\r\n            nodes: this._data.nodes,\r\n            edges: this._data.edges,\r\n            selected: this._data.selected,\r\n            layout,\r\n            groupColors: this._groupColors,\r\n            subsequentNodes\r\n        };\r\n        this._nodes = new DiagramNodes({\r\n            nodeWidth: this._nodeWidth,\r\n            iconFontFamily: this._iconFontFamily,\r\n            mouseControl: this._mouseControl\r\n        });\r\n\r\n        this._nodes.render(this.container.node())\r\n            .on(\"selectNode\", (name) => {\r\n                this._observable.fire(\"selectNode\", name);\r\n            })\r\n            .on(\"deselectNode\", (name, highlightDeselected) => {\r\n                this._observable.fire(\"deselectNode\", name, highlightDeselected);\r\n            })\r\n            .on(\"highlightNode\", (name) => {\r\n                this._observable.fire(\"highlightNode\", name);\r\n            })\r\n            .on(\"unhighlightNode\", (name) => {\r\n                this._observable.fire(\"unhighlightNode\", name);\r\n            });\r\n\r\n        this._nodes.setData(data);\r\n    }\r\n\r\n    hasRenderedNodes() {\r\n        return this._hasRenderedNodes;\r\n    }\r\n\r\n    selectNode(name) {\r\n        this._nodes.selectNode(name);\r\n        this._edges.selectEdges(name);\r\n    }\r\n\r\n    deselectNode(name) {\r\n        const isSomeHighlighted = this._nodes.isSomeHighlighted();\r\n        this._nodes.deselectNode(name);\r\n        this._edges.deselectEdges(isSomeHighlighted);\r\n    }\r\n\r\n    highlightNode(name) {\r\n        this._nodes.highlightNode(name);\r\n        this._edges.highlightEdges(name);\r\n    }\r\n\r\n    unhighlightNode() {\r\n        const isSomeSelected = this._nodes.isSomeSelected();\r\n        this._nodes.unhighlightNode();\r\n        this._edges.unhighlightEdges(isSomeSelected);\r\n    }\r\n\r\n    centerNode(name) {\r\n        const node = this._nodes.getNodeByName(name);\r\n        if (!this._zoomable || !this.isNodeOutOfView(node)) {\r\n            return;\r\n        }\r\n\r\n        const defaultPosition = {\r\n            x: node.styles.x,\r\n            y: node.styles.y\r\n        };\r\n        const x = this._svgSize.width / 2 - (defaultPosition.x + (NODE_WIDTH / 2)) * this._currentScale;\r\n        const y = this._svgSize.height / 2 - (defaultPosition.y + (NODE_HEIGHT / 2)) * this._currentScale;\r\n\r\n        this._svgContainer.transition().duration(this._transitionDuration).call(\r\n            this._zoom.transform,\r\n            d3.zoomIdentity.translate(x, y).scale(this._currentScale)\r\n        );\r\n    }\r\n\r\n    isNodeOutOfView(node) {\r\n        const currentPosition = node.container.node().getBoundingClientRect();\r\n        const nodeOffset = {\r\n            top: currentPosition.top - this._svgSize.top,\r\n            bottom: currentPosition.top + NODE_HEIGHT,\r\n            left: currentPosition.left - this._svgSize.left,\r\n            right: currentPosition.left + NODE_WIDTH\r\n        };\r\n\r\n        return (\r\n            nodeOffset.bottom > this._svgSize.height ||\r\n            nodeOffset.top < 0 ||\r\n            nodeOffset.right > this._svgSize.width ||\r\n            nodeOffset.left < 0\r\n        );\r\n    }\r\n\r\n    setTransform(transform) {\r\n        this._container.attr(\"transform\", `translate(${transform.x}, ${transform.y}), scale(${transform.k})`);\r\n    }\r\n\r\n    setZoom(targetScale) {\r\n        if (!this._zoomable) {\r\n            return;\r\n        }\r\n        this._zoom.scaleTo(\r\n            this._svgContainer.transition().duration(this._transitionDuration),\r\n            targetScale\r\n        );\r\n    }\r\n\r\n    setFullExtent() {\r\n        if (!this._zoomable) {\r\n            return;\r\n        }\r\n\r\n        const {x, y, k} = this.getZoomFullExtentTransform();\r\n        this._svgContainer.transition().duration(this._transitionDuration).call(\r\n            this._zoom.transform,\r\n            d3.zoomIdentity.translate(x, y).scale(k)\r\n        );\r\n    }\r\n\r\n    getZoomFullExtentTransform() {\r\n        const {x, y} = this._getTranslatePosition(this._zoomOutScale);\r\n        return {\r\n            x, y, k: this._zoomOutScale\r\n        };\r\n    }\r\n\r\n    reloadZoom() {\r\n        if (!this._zoom) {\r\n            return;\r\n        }\r\n\r\n        this._zoom.on(\"zoom\", null);\r\n\r\n        const lastScale = this._currentScale;\r\n        this._doZoom();\r\n\r\n        if (lastScale < this._zoomOutScale) {\r\n            this.setFullExtent();\r\n        }\r\n    }\r\n\r\n    _clearData() {\r\n        if (this._zoom) {\r\n            this._zoom.on(\"zoom\", null);\r\n        }\r\n        this._dataEdges = null;\r\n        this._dataNodes = null;\r\n        this._edges = null;\r\n        this._nodes = null;\r\n        this._elk = null;\r\n    }\r\n}\r\n\r\nexport default Diagram;\r\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","Component","className","_container","_className","_observable","_svg","eventName","on","off","selector","x","y","d3","append","attr","style","destroy","_renderContainer","datum","fire","isRendered","clearData","remove","_clearData","_data","data","_setData","NODE_WIDTH","NODE_HEIGHT","DiagramEdge","container","selectAll","_selected","selected","_muted","muted","_renderEdge","markerEnd","strokeColor","_edge","d","layout","sections","path","startPoint","endPoint","lastPoint","bendPoints","forEach","bendPoint","nextPoint","params","_this2","_getSectionParams","section","_getSection","endSection","edge","type","defaultRadius","isEnd","curve","line","radius","diff","rounded","lastRounded","nextRounded","keys","abs","Math","key","lineEndCorrection","lastX","current","lastY","nextY","nextX","concat","point","round","value","DiagramEdges","_renderDefs","_createEdges","_renderEdges","_subsequentNodes","subsequentNodes","edges","_setEdgeData","_edges","map","render","_this3","node","start","isSubsequentNode","_isSubsequentNode","setData","id","color","name","diagramEdge","_this4","setSelected","setMuted","setStyle","isSomeHighlighted","_this5","_this6","highlighted","isSomeSelected","_this7","nodeName","edgeStart","DiagramNode","nodeWidth","iconFontFamily","_nodeWidth","_iconFontFamily","add","_node","_selectedMuted","selectedMuted","_selectedSubsequent","selectedSubsequent","_styles","styles","_groupColor","groupColor","_renderAll","_renderGradients","_renderNodeBaseLayer","_renderNodeSkeleton","icon","_renderIcon","_renderLine","_setNodeStyle","_rendertNodeName","_gradientEdge","_defs","_renderDefaultGradient","_renderMutedGradient","_defaultGradient","offset","opacity","enter","_mutedGradient","_nodeBaseLayer","width","height","_nodeSkeleton","_icon","NODE_GROUP_WIDTH","ICON_FONT_SIZE","text","_line","_setSpecialStyle","_highlighted","_highlightedSubsequent","_highlightedMuted","_setOriginalStyle","_setMutedStyle","_clipPath","_nodeNameMask","_nodeName","NODE_NAME_FONT_SIZE","DiagramNodes","mouseControl","_mouseControl","_dataNodes","nodes","_dataEdges","_layout","_groupColors","groupColors","_createNodes","_renderNodes","_setNodeData","_nodes","_getStyles","children","isSelected","_enterTimeout","setTimeout","diagramNode","setSelectedSubsequent","setSelectedMuted","setHighlighted","setHighlightedSubsequent","setHighlightedMuted","group","some","isHighlighted","find","nodeHeight","elkWorkerUrl","zoomable","diagramMargin","_nodeHeight","_elkWorkerUrl","_zoomable","_diagramMargin","_hasRenderedNodes","_currentScale","_transitionDuration","_elk","ELK","_this","_svgContainer","_renderElk","graph","_getElkGraph","then","_getSubsequentNodes","_graphSize","_getGraphSize","_doZoom","_moveGraph","_setGraphSize","_getRootProperties","end","obj","item","_findEdgesRecursive","names","alreadySearched","results","filteredEdges","filter","namesToFind","result","edgesWithBendPoints","flatMap","bendPointsYs","maxEdgesY","max","maxNodesY","_getTranslatePosition","call","_zoom","transform","translate","scale","getOffset","dimension","_svgSize","offsetX","offsetY","getBoundingClientRect","classed","_zoomOutScaleWidth","_getZoomOutScale","_zoomOutScaleHeight","_zoomOutScale","min","extent","scaleExtent","_zoomHandler","bind","size","k","highlightDeselected","selectNode","selectEdges","deselectNode","deselectEdges","highlightNode","highlightEdges","unhighlightNode","unhighlightEdges","getNodeByName","isNodeOutOfView","defaultPosition","transition","duration","currentPosition","nodeOffset","top","left","bottom","right","targetScale","scaleTo","getZoomFullExtentTransform","lastScale","setFullExtent"],"mappings":"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"}