{"version":3,"file":"clever-diagram-1.1.0.min.js","sources":["../src/utils/Observable.js","../src/Component.js","../src/DiagramDefaults.js","../src/DiagramEdges.js","../src/DiagramNode.js","../src/DiagramNodes.js","../src/Diagram.js"],"sourcesContent":["/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Add new event to be handled\r\n\t * @param {String} event\r\n\t */\r\n\tadd(event) {\r\n\t\tif (!(event in this._handlers)) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\r\n}","import Observable from \"./utils/Observable\";\r\nimport style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\n\r\nclass Component {\r\n\r\n\tconstructor(\r\n\t\tclassName = \"component\"\r\n\t) {\r\n\t\tthis._container = null;\r\n\t\tthis._className = className;\r\n\r\n\t\tthis._observable = new Observable([\r\n\t\t\t\"enter\",\r\n\t\t\t\"leave\",\r\n\t\t\t\"click\"\r\n\t\t]);\r\n\r\n\t\tthis._lastData = null;\r\n\t\tthis._svg = null;\r\n\t}\r\n\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget className() {\r\n\t\treturn this._className;\r\n\t}\r\n\r\n\tget container() {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n    get observable() {\r\n        return this._observable;\r\n\t}\r\n\r\n\t_renderContainer(selector, x = 0, y = 0){\r\n\r\n\t\treturn d3.select(selector).append(\"g\")\r\n\t\t\t.attr(\"class\", style[this.className])\r\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`);\r\n\r\n\t}\r\n\r\n\trender(selector, x = 0, y = 0, index = 0){\r\n\t\tthis.destroy();\r\n\r\n\t\tthis._container = this._renderContainer(selector, x, y);\r\n\r\n        if (!this._container) {\r\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\r\n        }\r\n\r\n\t\tthis._container.datum(index);\r\n\r\n\t\tthis._container\r\n\t\t\t.on(\"click\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"click\", index);\r\n\t\t\t})\r\n\t\t\t.on(\"mouseenter\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"enter\", index);\r\n\t\t\t})\r\n\t\t\t.on(\"mouseleave\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"leave\", index);\r\n\t\t\t});\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdestroy(){\r\n\t\tif (this.isRendered()) {\r\n            this._lastData = null;\r\n\t\t\tthis.clearData();\r\n\t\t\tthis._container.datum(null);\r\n\t\t\tthis._container.remove();\r\n\t\t\tthis._container = null;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tclearData() {\r\n\t\tif (!this.isRendered()) {\r\n\t\t\tthrow \"Can't call clearData() when widget is not rendered, please call .render() first.\";\r\n\t\t}\r\n\t\tthis._clearData();\r\n\t\tthis._data = null;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tisRendered(){\r\n\t\treturn this._container !== null;\r\n\t}\r\n\r\n\tsetData(data) {\r\n\t\tif (!this.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\";\r\n\t\t}\r\n\t\tthis._setData(this._container, data, this._lastData);\r\n\t\tthis._lastData = Object.assign({}, this._lastData, data);\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Component;\r\n","\r\nexport const DIAGRAM_MARGIN = 50;\r\nexport const NODE_WIDTH = 190;\r\nexport const NODE_HEIGHT = 40;\r\nexport const NODE_GROUP_WIDTH = 40;\r\n\r\nexport const MOUSE_CONTROL = false;\r\n\r\nexport const ICON_FONT_SIZE = 18;\r\nexport const NODE_NAME_FONT_SIZE = 13;\r\n\r\nexport const NODE_ICON_COLOR = '#4a4a4a';\r\nexport const NODE_NAME_COLOR = '#4a4a4a';\r\nexport const NODE_DEFAULT_BG = 'rgba(255,255,255,1)';\r\nexport const NODE_SELECTED_BG = '#f8e71c';\r\nexport const NODE_MUTED_BG = '#f0f0f0';\r\nexport const NODE_GROUP_COLOR_DEFAULT = '#2196F3';\r\nexport const NODE_GROUP_COLOR_MUTED = '#d5d5d5';\r\nexport const NODE_STROKE_COLOR = '#4a4a4a';\r\nexport const EDGES_STROKE_COLOR = '#4a4a4a';\r\n","import Component from './Component';\r\nimport {\r\n    EDGES_STROKE_COLOR\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramEdges extends Component {\r\n    constructor() {\r\n        super('diagram-edges');\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._renderDefs();\r\n\r\n        this._renderEdges(data);\r\n    }\r\n\r\n    _renderDefs() {\r\n        this.container.append(\"svg:defs\")\r\n\t\t\t.append(\"svg:marker\")\r\n\t\t\t.attr(\"id\", \"end\")\r\n\t\t\t.attr(\"viewBox\", \"0 -5 10 10\")\r\n\t\t\t.attr(\"refX\", 10)\r\n\t\t\t.attr(\"refY\", 0)\r\n\t\t\t.attr(\"markerWidth\", 4)\r\n\t\t\t.attr(\"markerHeight\", 4)\r\n\t\t\t.attr(\"orient\", \"auto\")\r\n\t\t\t.style(\"fill\", EDGES_STROKE_COLOR)\r\n\t\t\t.style(\"stroke-opacity\", 0.6)\r\n\t\t\t.append(\"svg:path\")\r\n\t\t\t.attr(\"d\", \"M0,-5L10,0L0,5\");\r\n    }\r\n\r\n    _renderEdges(data) {\r\n        const layout = data.layout;\r\n        data.edges.forEach((edge, index) => {\r\n            const link = this.container.append(\"path\")\r\n                .attr(\"class\", \"link\")\r\n                .attr(\"stroke\", EDGES_STROKE_COLOR)\r\n                .attr(\"stroke-width\", 1)\r\n                .attr(\"stroke-linejoin\", \"bevel\")\r\n                .attr(\"fill\", \"transparent\")\r\n                .attr(\"d\", () => {\r\n                    const d = layout.edges[index].sections[0];\r\n                    let path = \"\";\r\n                    if (d.startPoint && d.endPoint) {\r\n                        path += `M${d.startPoint.x} ${d.startPoint.y}`;\r\n\r\n                        const radius = 6;\r\n                        let lastPoint = {\r\n                            x: d.startPoint.x,\r\n                            y: d.startPoint.y\r\n                        };\r\n\r\n                        let init = true;\r\n\r\n                        (d.bendPoints || []).forEach(function (bendPoint) {\r\n\r\n                            const params = this._getSectionParams(\r\n                                bendPoint,\r\n                                lastPoint,\r\n                                init,\r\n                                radius\r\n                            );\r\n\r\n                            const section = this._getSection(params);\r\n\r\n                            path += section;\r\n\r\n                            lastPoint.x = bendPoint.x;\r\n                            lastPoint.y = bendPoint.y;\r\n\r\n                            init = false;\r\n\r\n                        }, this);\r\n\r\n                        const isEnd = true;\r\n                        const params = this._getSectionParams(\r\n                            d.endPoint,\r\n                            lastPoint,\r\n                            init,\r\n                            radius,\r\n                            isEnd\r\n                        );\r\n\r\n                        const endSection = this._getSection(params);\r\n\r\n                        path += endSection;\r\n                    }\r\n\r\n                    return path;\r\n                });\r\n\r\n            if (edge.type == \"arrow\") {\r\n                link.attr(\"marker-end\", \"url(#end)\");\r\n            }\r\n        });\r\n    }\r\n\r\n    _getSection(params) {\r\n        const {x, y, init, radius, isEnd} = params;\r\n\r\n        let curve = '';\r\n        let line = '';\r\n        const lineEndCorrection = isEnd ? 0 : radius;\r\n\r\n        if (x.lastRounded === x.rounded && y.lastRounded > y.rounded) {\r\n            // to top\r\n            curve = `Q ${x.last} ${y.last} ${x.last} ${y.last - radius} `;\r\n            line = `L ${x.current} ${y.current + lineEndCorrection} `;\r\n        } else if (x.lastRounded === x.rounded && y.lastRounded < y.rounded) {\r\n            // to bottom\r\n            curve = `Q ${x.last} ${y.last} ${x.last} ${y.last + radius} `;\r\n            line = `L ${x.current} ${y.current - lineEndCorrection} `;\r\n        } else if (x.lastRounded < x.rounded && y.lastRounded === y.rounded) {\r\n            // to right\r\n            if (!init) {\r\n                curve = `Q ${x.last} ${y.last} ${x.last + radius} ${y.last} `;\r\n            }\r\n            line = `L ${x.current - lineEndCorrection} ${y.current} `;\r\n        } else if (x.lastRounded > x.rounded && y.lastRounded === y.rounded) {\r\n            // to left\r\n            if (!init) {\r\n                curve = `Q ${x.last} ${y.last} ${x.last - radius} ${y.last} `;\r\n            }\r\n            line = `L ${x.current + lineEndCorrection} ${y.current} `;\r\n        }\r\n\r\n        return curve.concat(line);\r\n    }\r\n\r\n    _getSectionParams(\r\n        point,\r\n        lastPoint,\r\n        init,\r\n        radius,\r\n        isEnd = false\r\n    ) {\r\n        return {\r\n            x: {\r\n                current: point.x,\r\n                last: lastPoint.x,\r\n                rounded: Math.round(point.x),\r\n                lastRounded: Math.round(lastPoint.x)\r\n            },\r\n            y: {\r\n                current: point.y,\r\n                last: lastPoint.y,\r\n                rounded: Math.round(point.y),\r\n                lastRounded: Math.round(lastPoint.y)\r\n            },\r\n            init,\r\n            radius,\r\n            isEnd\r\n        };\r\n    }\r\n}\r\n\r\nexport default DiagramEdges;\r\n","import style from \"./CleverDiagram.css\";\r\nimport Component from './Component';\r\nimport {\r\n    NODE_HEIGHT,\r\n    ICON_FONT_SIZE,\r\n    NODE_SELECTED_BG,\r\n    NODE_DEFAULT_BG,\r\n    NODE_MUTED_BG,\r\n    NODE_GROUP_COLOR_MUTED,\r\n    NODE_GROUP_WIDTH,\r\n    NODE_STROKE_COLOR,\r\n    NODE_NAME_FONT_SIZE,\r\n    NODE_ICON_COLOR,\r\n    NODE_NAME_COLOR\r\n} from './DiagramDefaults';\r\n\r\nclass DiagramNode extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            iconFontFamily\r\n        }\r\n    ) {\r\n        super('diagram-node');\r\n        this._nodeWidth = nodeWidth;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._observable\r\n            .add(\"enterNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._node = data.node;\r\n        this._selected = data.selected;\r\n        this._selectedMuted = data.selectedMuted;\r\n        this._selectedSubsequent = data.selectedSubsequent;\r\n        this._styles = data.styles;\r\n        this._groupColor = data.groupColor;\r\n\r\n        this._renderAll();\r\n    }\r\n\r\n    _renderAll() {\r\n        this._renderGradients();\r\n        this._renderNodeSkeleton();\r\n\r\n        if (this._node.icon) {\r\n            this._renderIcon();\r\n        }\r\n\r\n        this._renderLine();\r\n        this._setNodeStyle();\r\n        this._rendertNodeName();\r\n    }\r\n\r\n    _renderGradients() {\r\n        this._gradientEdge = NODE_GROUP_WIDTH/this._nodeWidth;\r\n\r\n        this._defs = this.container.append(\"svg:defs\");\r\n\r\n        this._renderDefaultGradient();\r\n        this._renderMutedGradient();\r\n    }\r\n\r\n    _renderDefaultGradient() {\r\n        const colorDefaultBg = NODE_DEFAULT_BG;\r\n\r\n        this._defaultGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", `node-background-default-${this._node.name}`);\r\n\r\n        this._defaultGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge, color: this._groupColor, opacity: '0.4'},\r\n                { offset: this._gradientEdge + 0.001, color: colorDefaultBg, opacity: '1'},\r\n                { offset: \"1\", color: colorDefaultBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", function (d) { return d.offset; })\r\n            .attr(\"stop-color\", function (d) { return d.color; })\r\n            .attr(\"stop-opacity\", function (d) { return d.opacity; });\r\n    }\r\n\r\n    _renderMutedGradient() {\r\n        const colorMutedBg = NODE_MUTED_BG;\r\n        const colorGroupMuted= NODE_GROUP_COLOR_MUTED;\r\n\r\n        this._mutedGradient = this._defs\r\n            .append(\"svg:linearGradient\")\r\n            .attr(\"id\", \"node-background-muted\");\r\n\r\n        this._mutedGradient.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge, color: colorGroupMuted, opacity: '1'},\r\n                { offset: this._gradientEdge + 0.001, color: colorMutedBg, opacity: '1'},\r\n                { offset: \"1\", color: colorMutedBg, opacity: '1'}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", function (d) { return d.offset; })\r\n            .attr(\"stop-color\", function (d) { return d.color; })\r\n            .attr(\"stop-opacity\", function (d) { return d.opacity; });\r\n    }\r\n\r\n    _renderNodeSkeleton(){\r\n        this._nodeSkeleton = this.container\r\n            .append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._styles.width)\r\n            .attr(\"height\", this._styles.height)\r\n            .attr(\"fill\", `url(#node-background-default-${this._node.name})`)\r\n            .attr(\"rx\", 5)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"class\", style['node-skeleton'])\r\n            .attr(\"id\", this._node.name);\r\n    }\r\n\r\n    _renderIcon() {\r\n        this._icon = this.container.append(\"text\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH/2)\r\n            .attr(\"y\", (this._styles.height/2 + ICON_FONT_SIZE/2) - 1)\r\n            .attr(\"class\", style['node-icon'])\r\n            .attr(\"font-family\", this._iconFontFamily)\r\n            .attr(\"font-size\", ICON_FONT_SIZE)\r\n            .attr(\"fill\", NODE_ICON_COLOR)\r\n            .text(this._node.icon);\r\n    }\r\n\r\n    _renderLine() {\r\n        this._line = this.container\r\n            .append(\"line\")\r\n            .attr(\"x1\", NODE_GROUP_WIDTH)\r\n            .attr(\"y1\", 0)\r\n            .attr(\"x2\", NODE_GROUP_WIDTH)\r\n            .attr(\"y2\", NODE_GROUP_WIDTH)\r\n            .attr(\"stroke\", NODE_STROKE_COLOR)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"opacity\", 0);\r\n    }\r\n\r\n    _setNodeStyle() {\r\n        if (this._selected) {\r\n            this._setSpecialStyle(NODE_SELECTED_BG, 1);\r\n        } else if (this._highlighted) {\r\n            this._setSpecialStyle(this._groupColor, 0.4);\r\n        } else if (!this._highlightedSubsequent && (this._selectedMuted || this._highlightedMuted)) {\r\n            this._setMutedStyle();\r\n        } else {\r\n            this._setOriginalStyle();\r\n        }\r\n    }\r\n\r\n    _rendertNodeName() {\r\n        this._clipPath = this._defs\r\n            .append(\"clipPath\")\r\n            .attr(\"id\", \"node-name-mask\");\r\n\r\n        this._nodeNameMask = this._clipPath\r\n            .append(\"rect\")\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this._nodeWidth - NODE_GROUP_WIDTH - 25)\r\n            .attr(\"height\", this._styles.height);\r\n\r\n        this._nodeName = this.container\r\n            .append(\"g\")\r\n            .attr(\"clip-path\", \"url(#node-name-mask)\")\r\n            .append(\"text\")\r\n            .text(this._node.name)\r\n            .attr(\"x\", NODE_GROUP_WIDTH + 15)\r\n            .attr(\"y\", (NODE_HEIGHT/2 + NODE_NAME_FONT_SIZE/2) - 2)\r\n            .attr(\"font-size\", NODE_NAME_FONT_SIZE)\r\n            .attr(\"fill\", NODE_NAME_COLOR)\r\n            .attr(\"class\", style[\"node-name\"]);\r\n    }\r\n\r\n    setStyle() {\r\n        this._setNodeStyle();\r\n    }\r\n\r\n    isSelected() {\r\n        return this._selected;\r\n    }\r\n\r\n    isSelectedSubsequent() {\r\n        return this._selectedSubsequent;\r\n    }\r\n\r\n    setSelected(value) {\r\n        this._selected = value;\r\n    }\r\n\r\n    setSelectedSubsequent(value) {\r\n        this._selectedSubsequent = value;\r\n    }\r\n\r\n    setHighlighted(value) {\r\n        this._highlighted = value;\r\n    }\r\n\r\n    setHighlightedSubsequent(value) {\r\n        this._highlightedSubsequent = value;\r\n    }\r\n\r\n    setSelectedMuted(value) {\r\n        this._selectedMuted = value;\r\n    }\r\n\r\n    setHighlightedMuted(value) {\r\n        this._highlightedMuted = value;\r\n    }\r\n\r\n    _setSpecialStyle(color, opacity) {\r\n        this._nodeSkeleton.attr(\"fill\", color);\r\n        this._nodeSkeleton.attr(\"fill-opacity\", opacity);\r\n        this._line.attr(\"opacity\", \"1\");\r\n    }\r\n\r\n    _setMutedStyle() {\r\n        this._nodeSkeleton.attr(\"fill\", \"url(#node-background-muted\");\r\n        this._nodeSkeleton.attr(\"fill-opacity\", \"1\");\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n\r\n    _setOriginalStyle() {\r\n        this._nodeSkeleton.attr(\"fill\", `url(#node-background-default-${this._node.name})`);\r\n        this._nodeSkeleton.attr(\"fill-opacity\", \"1\");\r\n        this._line.attr(\"opacity\", \"0\");\r\n    }\r\n}\r\n\r\nexport default DiagramNode;\r\n","import Component from './Component';\r\nimport DiagramNode from './DiagramNode';\r\nimport {NODE_GROUP_COLOR_DEFAULT} from './DiagramDefaults';\r\n\r\nclass DiagramNodes extends Component {\r\n    constructor(\r\n        {\r\n            nodeWidth,\r\n            mouseControl,\r\n            iconFontFamily\r\n        }\r\n    ) {\r\n        super('diagram-nodes');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._mouseControl = mouseControl;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\");\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataNodes = data.nodes;\r\n        this._dataEdges = data.edges;\r\n        this._layout = data.layout;\r\n        this._groupColors = data.groupColors;\r\n        this._selected = data.selected;\r\n\r\n        this._subsequentNodes = this._getSubsequentNodes(data);\r\n\r\n        this._createNodes(data);\r\n        this._renderNodes();\r\n\r\n        data.nodes.forEach((node, index) => this._setNodeData(node, index));\r\n\r\n        if (this._mouseControl) {\r\n            this._doSelecting();\r\n            this._doHighlighting();\r\n        }\r\n    }\r\n\r\n    _getSubsequentNodes(data) {\r\n        return data.nodes.reduce((obj, item) => {\r\n            const edges = this._findEdgesRecursive(data.edges, [item.name]);\r\n            obj[item.name] = edges.map(edge => edge.end);\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n    _findEdgesRecursive(edges, names, alreadySearched=[]) {\r\n        let results = [];\r\n        names.forEach(name => {\r\n            if (alreadySearched.indexOf(name) >= 0) {\r\n                return;\r\n            }\r\n\r\n            const filteredEdges = edges.filter(edge => edge.start === name);\r\n            results = results.concat(filteredEdges);\r\n        });\r\n\r\n        const namesToFind = results.map(result => result.end);\r\n        alreadySearched = alreadySearched.concat(names);\r\n\r\n        if (namesToFind.length) {\r\n            return results.concat(this._findEdgesRecursive(this._dataEdges, namesToFind, alreadySearched));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    _createNodes(data) {\r\n        this._nodes = data.nodes.map(() => {\r\n            return new DiagramNode({\r\n                nodeWidth: this._nodeWidth,\r\n                iconFontFamily: this._iconFontFamily\r\n            });\r\n        });\r\n    }\r\n\r\n    _renderNodes() {\r\n        this._nodes.forEach((node, index) => {\r\n            const name = this._dataNodes[index].name;\r\n            const styles = this._getStyles(this._layout.children[index]);\r\n            node.render(this.container.node(), styles.x, styles.y, index)\r\n                .on(\"click\", (index) => {\r\n                    if (this._nodes[index].isSelected()) {\r\n                        this._observable.fire(\"deselectNode\", name);\r\n                    } else {\r\n                        this._observable.fire(\"selectNode\", name);\r\n                    }\r\n                })\r\n                .on(\"enter\", () => {\r\n                    this._enterTimeout = setTimeout(() => {\r\n                        this._observable.fire(\"highlightNode\", name);\r\n                    }, 150);\r\n                })\r\n                .on(\"leave\", () => {\r\n                    clearTimeout(this._enterTimeout);\r\n                    this._observable.fire(\"unhighlightNode\");\r\n                });\r\n        });\r\n    }\r\n\r\n    selectNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const selected = name === node.name;\r\n            const muted = !(selected || isSubsequentNode);\r\n\r\n            diagramNode.setSelected(selected);\r\n            diagramNode.setSelectedSubsequent(isSubsequentNode);\r\n            diagramNode.setSelectedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    deselectNode(name, highlightDeselected=false) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n\r\n            diagramNode.setSelected(false);\r\n            diagramNode.setSelectedMuted(false);\r\n\r\n            if (highlightDeselected) {\r\n                const highlighted = name === node.name;\r\n                const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n                const muted = !(highlighted || isSubsequentNode);\r\n\r\n                diagramNode.setHighlighted(highlighted);\r\n                diagramNode.setHighlightedSubsequent(isSubsequentNode);\r\n                diagramNode.setHighlightedMuted(muted);\r\n            }\r\n            diagramNode.setStyle();\r\n        });\r\n\r\n    }\r\n\r\n    highlightNode(name) {\r\n        const subsequentNodes = this._subsequentNodes[name];\r\n\r\n        this._dataNodes.forEach((node, index) => {\r\n            const diagramNode = this._nodes[index];\r\n            const highlighted = name === node.name;\r\n            const isSubsequentNode = subsequentNodes.indexOf(node.name) >= 0;\r\n            const muted = !(highlighted || isSubsequentNode);\r\n\r\n            diagramNode.setHighlighted(highlighted);\r\n            diagramNode.setHighlightedSubsequent(isSubsequentNode);\r\n            diagramNode.setHighlightedMuted(muted);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    unhighlightNode() {\r\n        this._nodes.forEach((diagramNode) => {\r\n            diagramNode.setHighlighted(false);\r\n            diagramNode.setHighlightedSubsequent(false);\r\n            diagramNode.setHighlightedMuted(false);\r\n            diagramNode.setStyle();\r\n        });\r\n    }\r\n\r\n    _setNodeData(node, index) {\r\n        const styles = this._getStyles(this._layout.children[index]);\r\n        const groupColor = this._groupColors[node.group] || NODE_GROUP_COLOR_DEFAULT;\r\n        const selected = this._selected === node.name;\r\n        let selectedMuted, selectedSubsequent = false;\r\n\r\n        if (this._selected) {\r\n            const subsequentNodes = this._subsequentNodes[this._selected];\r\n            const isSubsequentNode = subsequentNodes && subsequentNodes.indexOf(node.name) >= 0;\r\n            selectedMuted = !isSubsequentNode;\r\n            selectedSubsequent = isSubsequentNode;\r\n        }\r\n\r\n        this._nodes[index].setData({\r\n            node,\r\n            selected,\r\n            selectedSubsequent,\r\n            selectedMuted,\r\n            styles,\r\n            groupColor\r\n        });\r\n    }\r\n\r\n    _doSelecting() {\r\n        this.on(\"selectNode\", (name) => {\r\n            this.selectNode(name);\r\n        });\r\n\r\n        this.on(\"deselectNode\", (name) => {\r\n            this.deselectNode(name, true);\r\n\t\t});\r\n    }\r\n\r\n    _doHighlighting() {\r\n        this.on(\"highlightNode\", (name) => {\r\n            this.highlightNode(name);\r\n        });\r\n\r\n        this.on(\"unhighlightNode\", () => {\r\n            this.unhighlightNode();\r\n\t\t});\r\n    }\r\n\r\n    _getStyles(layout) {\r\n        return {\r\n            y: layout.y,\r\n            x: layout.x,\r\n            width: layout.width,\r\n            height: layout.height\r\n        };\r\n    }\r\n}\r\n\r\nexport default DiagramNodes;\r\n","import style from \"./CleverDiagram.css\";\r\nimport * as d3 from \"d3\";\r\nimport * as ELK from \"ELK\";\r\nimport Component from './Component';\r\nimport DiagramEdges from './DiagramEdges';\r\nimport DiagramNodes from './DiagramNodes';\r\nimport {\r\n    DIAGRAM_MARGIN,\r\n    NODE_WIDTH,\r\n    NODE_HEIGHT,\r\n    MOUSE_CONTROL\r\n} from './DiagramDefaults';\r\n\r\n/**\r\n * @class\r\n * Main Diagram class\r\n * @param {Object} options\r\n */\r\nclass Diagram extends Component {\r\n    constructor({\r\n        nodeWidth = NODE_WIDTH,\r\n        nodeHeight = NODE_HEIGHT,\r\n        groupColors = {},\r\n        elkWorkerUrl,\r\n        diagramMargin = DIAGRAM_MARGIN,\r\n        mouseControl = MOUSE_CONTROL,\r\n        iconFontFamily\r\n    }) {\r\n        super('diagram');\r\n\r\n        this._nodeWidth = nodeWidth;\r\n        this._nodeHeight = nodeHeight;\r\n        this._groupColors = groupColors;\r\n        this._elkWorkerUrl = elkWorkerUrl;\r\n        this._diagramMargin = diagramMargin;\r\n        this._mouseControl = mouseControl;\r\n        this._iconFontFamily = iconFontFamily;\r\n\r\n        this._hasRenderedNodes = false;\r\n\r\n        this._elk = new ELK({\r\n            workerUrl: this._elkWorkerUrl\r\n        });\r\n\r\n        this._observable\r\n            .add(\"selectNode\")\r\n            .add(\"deselectNode\")\r\n            .add(\"highlightNode\")\r\n            .add(\"unhighlightNode\");\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0) {\r\n        return d3.select(selector).append(\"svg\")\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`);\r\n    }\r\n\r\n    _setData(container, data) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        this._dataEdges = data.edges || [];\r\n        this._dataNodes = data.nodes || [];\r\n        this._data = data;\r\n\r\n        this._renderElk();\r\n    }\r\n\r\n    _renderElk() {\r\n        const graph = this._getElkGraph();\r\n\r\n        return this._elk.layout(graph).then(layout => {\r\n            this._renderNodes(layout);\r\n            this._renderEdges(layout);\r\n            this._setGraphSize(layout.children);\r\n            this._hasRenderedNodes = true;\r\n        });\r\n    }\r\n\r\n    _getElkGraph() {\r\n\t\treturn {\r\n\t\t\t\"id\": \"root\",\r\n\t\t\tproperties: this._getRootProperties(),\r\n\t\t\t\"children\": this._dataNodes.map(node => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: node.name,\r\n\t\t\t\t\twidth: this._nodeWidth,\r\n\t\t\t\t\theight: this._nodeHeight\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\t\"edges\": this._dataEdges.map((edge, index) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: \"edge_\" + index,\r\n\t\t\t\t\tsources: [edge.start],\r\n\t\t\t\t\ttargets: [edge.end]\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t};\r\n\t}\r\n\r\n\t_getRootProperties(){\r\n\t\treturn {\r\n\t\t\t'algorithm': 'layered',\r\n\t\t\t'direction':'RIGHT'\r\n\t\t};\r\n    }\r\n\r\n    _setGraphSize(nodes) {\r\n\t\tconst maxHeight = Math.max.apply(Math, nodes.map(node => node.y + node.height));\r\n\t\tconst maxWidth = Math.max.apply(Math, nodes.map(node => node.x + node.width));\r\n\r\n\t\tthis.container.style(\"width\", maxWidth + 10 + \"px\");\r\n        this.container.style(\"height\", maxHeight + 10 + \"px\");\r\n        this.container.style(\"margin\", this._diagramMargin + \"px\");\r\n\t}\r\n\r\n    _renderEdges(layout) {\r\n        const data = {\r\n            layout,\r\n            edges: this._dataEdges\r\n        };\r\n        this._edges = new DiagramEdges();\r\n        this._edges.render(this.container.node());\r\n        this._edges.setData(data);\r\n    }\r\n\r\n    _renderNodes(layout) {\r\n        const data = {\r\n            nodes: this._data.nodes,\r\n            edges: this._data.edges,\r\n            selected: this._data.selected,\r\n            layout,\r\n            groupColors: this._groupColors\r\n        };\r\n        this._nodes = new DiagramNodes({\r\n            nodeWidth: this._nodeWidth,\r\n            mouseControl: this._mouseControl,\r\n            iconFontFamily: this._iconFontFamily\r\n        });\r\n\r\n        this._nodes.render(this.container.node())\r\n            .on(\"selectNode\", (name) => {\r\n                this._observable.fire(\"selectNode\", name);\r\n            })\r\n            .on(\"deselectNode\", (name, highlightDeselected) => {\r\n                this._observable.fire(\"deselectNode\", name, highlightDeselected);\r\n            })\r\n            .on(\"highlightNode\", (name) => {\r\n                this._observable.fire(\"highlightNode\", name);\r\n            })\r\n            .on(\"unhighlightNode\", (name) => {\r\n                this._observable.fire(\"unhighlightNode\", name);\r\n            });\r\n\r\n        this._nodes.setData(data);\r\n    }\r\n\r\n    hasRenderedNodes() {\r\n        return this._hasRenderedNodes;\r\n    }\r\n\r\n    selectNode(name) {\r\n        this._nodes.selectNode(name);\r\n    }\r\n\r\n    deselectNode(name) {\r\n        this._nodes.deselectNode(name);\r\n    }\r\n\r\n    highlightNode(name) {\r\n        this._nodes.highlightNode(name);\r\n    }\r\n\r\n    unhighlightNode() {\r\n        this._nodes.unhighlightNode();\r\n    }\r\n\r\n    _clearData() {\r\n        this._dataEdges = null;\r\n        this._dataNodes = null;\r\n        this._edges = null;\r\n        this._nodes = null;\r\n        this._elk = null;\r\n    }\r\n}\r\n\r\nexport default Diagram;\r\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","Component","className","_container","_className","_observable","_lastData","_svg","eventName","on","off","selector","x","y","d3","append","attr","style","destroy","_renderContainer","datum","fire","isRendered","clearData","remove","_clearData","_data","data","_setData","Object","assign","NODE_HEIGHT","DiagramEdges","container","selectAll","_renderDefs","_renderEdges","layout","edges","forEach","edge","link","_this2","d","sections","path","startPoint","endPoint","lastPoint","init","bendPoints","bendPoint","params","_getSectionParams","section","_getSection","endSection","type","radius","isEnd","curve","line","lineEndCorrection","lastRounded","rounded","last","current","concat","point","Math","round","DiagramNode","nodeWidth","iconFontFamily","_nodeWidth","_iconFontFamily","add","_node","node","_selected","selected","_selectedMuted","selectedMuted","_selectedSubsequent","selectedSubsequent","_styles","styles","_groupColor","groupColor","_renderAll","_renderGradients","_renderNodeSkeleton","icon","_renderIcon","_renderLine","_setNodeStyle","_rendertNodeName","_gradientEdge","_defs","_renderDefaultGradient","_renderMutedGradient","_defaultGradient","name","offset","color","opacity","enter","_mutedGradient","_nodeSkeleton","width","height","_icon","NODE_GROUP_WIDTH","ICON_FONT_SIZE","text","_line","_setSpecialStyle","_highlighted","_highlightedSubsequent","_highlightedMuted","_setOriginalStyle","_setMutedStyle","_clipPath","_nodeNameMask","_nodeName","NODE_NAME_FONT_SIZE","value","DiagramNodes","mouseControl","_mouseControl","_dataNodes","nodes","_dataEdges","_layout","_groupColors","groupColors","_subsequentNodes","_getSubsequentNodes","_createNodes","_renderNodes","_setNodeData","_doSelecting","_doHighlighting","obj","item","_this3","_findEdgesRecursive","map","end","names","alreadySearched","results","filteredEdges","filter","start","namesToFind","result","_nodes","_this4","_this5","_getStyles","children","render","isSelected","_enterTimeout","setTimeout","subsequentNodes","diagramNode","_this6","isSubsequentNode","muted","setSelected","setSelectedSubsequent","setSelectedMuted","setStyle","highlightDeselected","_this7","highlighted","setHighlighted","setHighlightedSubsequent","setHighlightedMuted","_this8","group","setData","selectNode","deselectNode","highlightNode","unhighlightNode","nodeHeight","elkWorkerUrl","diagramMargin","_nodeHeight","_elkWorkerUrl","_diagramMargin","_hasRenderedNodes","_elk","ELK","_this","_renderElk","graph","_getElkGraph","then","_setGraphSize","_getRootProperties","maxHeight","max","maxWidth","_edges"],"mappings":"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"}